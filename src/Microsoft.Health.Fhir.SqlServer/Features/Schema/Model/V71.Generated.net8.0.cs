//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Health.Fhir.SqlServer.Features.Schema.Model
{
    using Microsoft.Health.SqlServer.Features.Client;
    using Microsoft.Health.SqlServer.Features.Schema.Model;

    internal class V71
    {
        internal readonly static ClaimTypeTable ClaimType = new ClaimTypeTable();
        internal readonly static CompartmentAssignmentTable CompartmentAssignment = new CompartmentAssignmentTable();
        internal readonly static CompartmentTypeTable CompartmentType = new CompartmentTypeTable();
        internal readonly static DateTimeSearchParamTable DateTimeSearchParam = new DateTimeSearchParamTable();
        internal readonly static EventAgentCheckpointTable EventAgentCheckpoint = new EventAgentCheckpointTable();
        internal readonly static EventLogTable EventLog = new EventLogTable();
        internal readonly static ExportJobTable ExportJob = new ExportJobTable();
        internal readonly static IndexPropertiesTable IndexProperties = new IndexPropertiesTable();
        internal readonly static JobQueueTable JobQueue = new JobQueueTable();
        internal readonly static NumberSearchParamTable NumberSearchParam = new NumberSearchParamTable();
        internal readonly static ParametersTable Parameters = new ParametersTable();
        internal readonly static ParametersHistoryTable ParametersHistory = new ParametersHistoryTable();
        internal readonly static QuantityCodeTable QuantityCode = new QuantityCodeTable();
        internal readonly static QuantitySearchParamTable QuantitySearchParam = new QuantitySearchParamTable();
        internal readonly static ReferenceSearchParamTable ReferenceSearchParam = new ReferenceSearchParamTable();
        internal readonly static ReferenceTokenCompositeSearchParamTable ReferenceTokenCompositeSearchParam = new ReferenceTokenCompositeSearchParamTable();
        internal readonly static ReindexJobTable ReindexJob = new ReindexJobTable();
        internal readonly static ResourceTable Resource = new ResourceTable();
        internal readonly static ResourceChangeDataTable ResourceChangeData = new ResourceChangeDataTable();
        internal readonly static ResourceChangeDataStagingTable ResourceChangeDataStaging = new ResourceChangeDataStagingTable();
        internal readonly static ResourceChangeTypeTable ResourceChangeType = new ResourceChangeTypeTable();
        internal readonly static ResourceTypeTable ResourceType = new ResourceTypeTable();
        internal readonly static ResourceWriteClaimTable ResourceWriteClaim = new ResourceWriteClaimTable();
        internal readonly static SchemaMigrationProgressTable SchemaMigrationProgress = new SchemaMigrationProgressTable();
        internal readonly static SearchParamTable SearchParam = new SearchParamTable();
        internal readonly static StringSearchParamTable StringSearchParam = new StringSearchParamTable();
        internal readonly static SystemTable System = new SystemTable();
        internal readonly static TaskInfoTable TaskInfo = new TaskInfoTable();
        internal readonly static TokenDateTimeCompositeSearchParamTable TokenDateTimeCompositeSearchParam = new TokenDateTimeCompositeSearchParamTable();
        internal readonly static TokenNumberNumberCompositeSearchParamTable TokenNumberNumberCompositeSearchParam = new TokenNumberNumberCompositeSearchParamTable();
        internal readonly static TokenQuantityCompositeSearchParamTable TokenQuantityCompositeSearchParam = new TokenQuantityCompositeSearchParamTable();
        internal readonly static TokenSearchParamTable TokenSearchParam = new TokenSearchParamTable();
        internal readonly static TokenStringCompositeSearchParamTable TokenStringCompositeSearchParam = new TokenStringCompositeSearchParamTable();
        internal readonly static TokenTextTable TokenText = new TokenTextTable();
        internal readonly static TokenTokenCompositeSearchParamTable TokenTokenCompositeSearchParam = new TokenTokenCompositeSearchParamTable();
        internal readonly static TransactionsTable Transactions = new TransactionsTable();
        internal readonly static UriSearchParamTable UriSearchParam = new UriSearchParamTable();
        internal readonly static WatchdogLeasesTable WatchdogLeases = new WatchdogLeasesTable();
        internal readonly static AcquireReindexJobsProcedure AcquireReindexJobs = new AcquireReindexJobsProcedure();
        internal readonly static AcquireWatchdogLeaseProcedure AcquireWatchdogLease = new AcquireWatchdogLeaseProcedure();
        internal readonly static AddPartitionOnResourceChangesProcedure AddPartitionOnResourceChanges = new AddPartitionOnResourceChangesProcedure();
        internal readonly static ArchiveJobsProcedure ArchiveJobs = new ArchiveJobsProcedure();
        internal readonly static CaptureResourceChangesProcedure CaptureResourceChanges = new CaptureResourceChangesProcedure();
        internal readonly static CaptureResourceIdsForChangesProcedure CaptureResourceIdsForChanges = new CaptureResourceIdsForChangesProcedure();
        internal readonly static CheckActiveReindexJobsProcedure CheckActiveReindexJobs = new CheckActiveReindexJobsProcedure();
        internal readonly static CleanupEventLogProcedure CleanupEventLog = new CleanupEventLogProcedure();
        internal readonly static ConfigurePartitionOnResourceChangesProcedure ConfigurePartitionOnResourceChanges = new ConfigurePartitionOnResourceChangesProcedure();
        internal readonly static CreateReindexJobProcedure CreateReindexJob = new CreateReindexJobProcedure();
        internal readonly static DefragProcedure Defrag = new DefragProcedure();
        internal readonly static DefragChangeDatabaseSettingsProcedure DefragChangeDatabaseSettings = new DefragChangeDatabaseSettingsProcedure();
        internal readonly static DeleteHistoryProcedure DeleteHistory = new DeleteHistoryProcedure();
        internal readonly static DequeueJobProcedure DequeueJob = new DequeueJobProcedure();
        internal readonly static DisableIndexProcedure DisableIndex = new DisableIndexProcedure();
        internal readonly static DisableIndexesProcedure DisableIndexes = new DisableIndexesProcedure();
        internal readonly static EnqueueJobsProcedure EnqueueJobs = new EnqueueJobsProcedure();
        internal readonly static ExecuteCommandForRebuildIndexesProcedure ExecuteCommandForRebuildIndexes = new ExecuteCommandForRebuildIndexesProcedure();
        internal readonly static FetchEventAgentCheckpointProcedure FetchEventAgentCheckpoint = new FetchEventAgentCheckpointProcedure();
        internal readonly static FetchResourceChangesProcedure FetchResourceChanges = new FetchResourceChangesProcedure();
        internal readonly static GetActiveJobsProcedure GetActiveJobs = new GetActiveJobsProcedure();
        internal readonly static GetCommandsForRebuildIndexesProcedure GetCommandsForRebuildIndexes = new GetCommandsForRebuildIndexesProcedure();
        internal readonly static GetIndexCommandsProcedure GetIndexCommands = new GetIndexCommandsProcedure();
        internal readonly static GetJobsProcedure GetJobs = new GetJobsProcedure();
        internal readonly static GetNonCompletedJobCountOfSpecificQueueTypeProcedure GetNonCompletedJobCountOfSpecificQueueType = new GetNonCompletedJobCountOfSpecificQueueTypeProcedure();
        internal readonly static GetPartitionedTablesProcedure GetPartitionedTables = new GetPartitionedTablesProcedure();
        internal readonly static GetReindexJobByIdProcedure GetReindexJobById = new GetReindexJobByIdProcedure();
        internal readonly static GetResourceSurrogateIdRangesProcedure GetResourceSurrogateIdRanges = new GetResourceSurrogateIdRangesProcedure();
        internal readonly static GetResourceVersionsProcedure GetResourceVersions = new GetResourceVersionsProcedure();
        internal readonly static GetResourcesProcedure GetResources = new GetResourcesProcedure();
        internal readonly static GetResourcesByTransactionIdProcedure GetResourcesByTransactionId = new GetResourcesByTransactionIdProcedure();
        internal readonly static GetResourcesByTypeAndSurrogateIdRangeProcedure GetResourcesByTypeAndSurrogateIdRange = new GetResourcesByTypeAndSurrogateIdRangeProcedure();
        internal readonly static GetSearchParamStatusesProcedure GetSearchParamStatuses = new GetSearchParamStatusesProcedure();
        internal readonly static GetTransactionsProcedure GetTransactions = new GetTransactionsProcedure();
        internal readonly static GetUsedResourceTypesProcedure GetUsedResourceTypes = new GetUsedResourceTypesProcedure();
        internal readonly static HardDeleteResourceProcedure HardDeleteResource = new HardDeleteResourceProcedure();
        internal readonly static InitDefragProcedure InitDefrag = new InitDefragProcedure();
        internal readonly static InitializeIndexPropertiesProcedure InitializeIndexProperties = new InitializeIndexPropertiesProcedure();
        internal readonly static LogEventProcedure LogEvent = new LogEventProcedure();
        internal readonly static LogSchemaMigrationProgressProcedure LogSchemaMigrationProgress = new LogSchemaMigrationProgressProcedure();
        internal readonly static MergeResourcesProcedure MergeResources = new MergeResourcesProcedure();
        internal readonly static MergeResourcesAdvanceTransactionVisibilityProcedure MergeResourcesAdvanceTransactionVisibility = new MergeResourcesAdvanceTransactionVisibilityProcedure();
        internal readonly static MergeResourcesBeginTransactionProcedure MergeResourcesBeginTransaction = new MergeResourcesBeginTransactionProcedure();
        internal readonly static MergeResourcesCommitTransactionProcedure MergeResourcesCommitTransaction = new MergeResourcesCommitTransactionProcedure();
        internal readonly static MergeResourcesDeleteInvisibleHistoryProcedure MergeResourcesDeleteInvisibleHistory = new MergeResourcesDeleteInvisibleHistoryProcedure();
        internal readonly static MergeResourcesGetTimeoutTransactionsProcedure MergeResourcesGetTimeoutTransactions = new MergeResourcesGetTimeoutTransactionsProcedure();
        internal readonly static MergeResourcesGetTransactionVisibilityProcedure MergeResourcesGetTransactionVisibility = new MergeResourcesGetTransactionVisibilityProcedure();
        internal readonly static MergeResourcesPutTransactionHeartbeatProcedure MergeResourcesPutTransactionHeartbeat = new MergeResourcesPutTransactionHeartbeatProcedure();
        internal readonly static MergeResourcesPutTransactionInvisibleHistoryProcedure MergeResourcesPutTransactionInvisibleHistory = new MergeResourcesPutTransactionInvisibleHistoryProcedure();
        internal readonly static PutJobCancelationProcedure PutJobCancelation = new PutJobCancelationProcedure();
        internal readonly static PutJobHeartbeatProcedure PutJobHeartbeat = new PutJobHeartbeatProcedure();
        internal readonly static PutJobStatusProcedure PutJobStatus = new PutJobStatusProcedure();
        internal readonly static RemovePartitionFromResourceChangesProcedure RemovePartitionFromResourceChanges = new RemovePartitionFromResourceChangesProcedure();
        internal readonly static SwitchPartitionsInProcedure SwitchPartitionsIn = new SwitchPartitionsInProcedure();
        internal readonly static SwitchPartitionsInAllTablesProcedure SwitchPartitionsInAllTables = new SwitchPartitionsInAllTablesProcedure();
        internal readonly static SwitchPartitionsOutProcedure SwitchPartitionsOut = new SwitchPartitionsOutProcedure();
        internal readonly static SwitchPartitionsOutAllTablesProcedure SwitchPartitionsOutAllTables = new SwitchPartitionsOutAllTablesProcedure();
        internal readonly static UpdateEventAgentCheckpointProcedure UpdateEventAgentCheckpoint = new UpdateEventAgentCheckpointProcedure();
        internal readonly static UpdateReindexJobProcedure UpdateReindexJob = new UpdateReindexJobProcedure();
        internal readonly static UpdateResourceSearchParamsProcedure UpdateResourceSearchParams = new UpdateResourceSearchParamsProcedure();
        internal readonly static UpsertSearchParamsProcedure UpsertSearchParams = new UpsertSearchParamsProcedure();

        internal class ClaimTypeTable : Table
        {
            internal ClaimTypeTable() : base("dbo.ClaimType")
            {
            }

            internal readonly TinyIntColumn ClaimTypeId = new TinyIntColumn("ClaimTypeId");
            internal readonly VarCharColumn Name = new VarCharColumn("Name", 128, "Latin1_General_100_CS_AS");
        }

        internal class CompartmentAssignmentTable : Table
        {
            internal CompartmentAssignmentTable() : base("dbo.CompartmentAssignment")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly TinyIntColumn CompartmentTypeId = new TinyIntColumn("CompartmentTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IX_CompartmentAssignment_CompartmentTypeId_ReferenceResourceId = new Index("IX_CompartmentAssignment_CompartmentTypeId_ReferenceResourceId");
        }

        internal class CompartmentTypeTable : Table
        {
            internal CompartmentTypeTable() : base("dbo.CompartmentType")
            {
            }

            internal readonly TinyIntColumn CompartmentTypeId = new TinyIntColumn("CompartmentTypeId");
            internal readonly VarCharColumn Name = new VarCharColumn("Name", 128, "Latin1_General_100_CS_AS");
        }

        internal class DateTimeSearchParamTable : Table
        {
            internal DateTimeSearchParamTable() : base("dbo.DateTimeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly DateTime2Column StartDateTime = new DateTime2Column("StartDateTime", 7);
            internal readonly DateTime2Column EndDateTime = new DateTime2Column("EndDateTime", 7);
            internal readonly BitColumn IsLongerThanADay = new BitColumn("IsLongerThanADay");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly BitColumn IsMin = new BitColumn("IsMin");
            internal readonly BitColumn IsMax = new BitColumn("IsMax");
            internal readonly Index IXC_DateTimeSearchParam = new Index("IXC_DateTimeSearchParam");
            internal readonly Index IX_DateTimeSearchParam_SearchParamId_StartDateTime_EndDateTime = new Index("IX_DateTimeSearchParam_SearchParamId_StartDateTime_EndDateTime");
            internal readonly Index IX_DateTimeSearchParam_SearchParamId_EndDateTime_StartDateTime = new Index("IX_DateTimeSearchParam_SearchParamId_EndDateTime_StartDateTime");
            internal readonly Index IX_DateTimeSearchParam_SearchParamId_StartDateTime_EndDateTime_Long = new Index("IX_DateTimeSearchParam_SearchParamId_StartDateTime_EndDateTime_Long");
            internal readonly Index IX_DateTimeSearchParam_SearchParamId_EndDateTime_StartDateTime_Long = new Index("IX_DateTimeSearchParam_SearchParamId_EndDateTime_StartDateTime_Long");
        }

        internal class EventAgentCheckpointTable : Table
        {
            internal EventAgentCheckpointTable() : base("dbo.EventAgentCheckpoint")
            {
            }

            internal readonly VarCharColumn CheckpointId = new VarCharColumn("CheckpointId", 64);
            internal readonly DateTimeOffsetColumn LastProcessedDateTime = new DateTimeOffsetColumn("LastProcessedDateTime", 7);
            internal readonly VarCharColumn LastProcessedIdentifier = new VarCharColumn("LastProcessedIdentifier", 64);
            internal readonly DateTime2Column UpdatedOn = new DateTime2Column("UpdatedOn", 7);
        }

        internal class EventLogTable : Table
        {
            internal EventLogTable() : base("dbo.EventLog")
            {
            }

            internal const string PartitionId = "PartitionId";
            internal readonly BigIntColumn EventId = new BigIntColumn("EventId");
            internal readonly DateTimeColumn EventDate = new DateTimeColumn("EventDate");
            internal readonly VarCharColumn Process = new VarCharColumn("Process", 100);
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
            internal readonly NullableVarCharColumn Mode = new NullableVarCharColumn("Mode", 200);
            internal readonly NullableVarCharColumn Action = new NullableVarCharColumn("Action", 20);
            internal readonly NullableVarCharColumn Target = new NullableVarCharColumn("Target", 100);
            internal readonly NullableBigIntColumn Rows = new NullableBigIntColumn("Rows");
            internal readonly NullableIntColumn Milliseconds = new NullableIntColumn("Milliseconds");
            internal readonly NullableNVarCharColumn EventText = new NullableNVarCharColumn("EventText", 3500);
            internal readonly SmallIntColumn SPID = new SmallIntColumn("SPID");
            internal readonly VarCharColumn HostName = new VarCharColumn("HostName", 64);
        }

        internal class ExportJobTable : Table
        {
            internal ExportJobTable() : base("dbo.ExportJob")
            {
            }

            internal readonly VarCharColumn Id = new VarCharColumn("Id", 64, "Latin1_General_100_CS_AS");
            internal readonly VarCharColumn Hash = new VarCharColumn("Hash", 64, "Latin1_General_100_CS_AS");
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
            internal readonly NullableDateTime2Column HeartbeatDateTime = new NullableDateTime2Column("HeartbeatDateTime", 7);
            internal readonly VarCharColumn RawJobRecord = new VarCharColumn("RawJobRecord", -1);
            internal readonly TimestampColumn JobVersion = new TimestampColumn("JobVersion");
            internal readonly Index IX_ExportJob_Hash_Status_HeartbeatDateTime = new Index("IX_ExportJob_Hash_Status_HeartbeatDateTime");
        }

        internal class IndexPropertiesTable : Table
        {
            internal IndexPropertiesTable() : base("dbo.IndexProperties")
            {
            }

            internal readonly VarCharColumn TableNameColumn = new VarCharColumn("TableName", 100);
            internal readonly VarCharColumn IndexName = new VarCharColumn("IndexName", 200);
            internal readonly VarCharColumn PropertyName = new VarCharColumn("PropertyName", 100);
            internal readonly VarCharColumn PropertyValue = new VarCharColumn("PropertyValue", 100);
            internal readonly DateTimeColumn CreateDate = new DateTimeColumn("CreateDate");
        }

        internal class JobQueueTable : Table
        {
            internal JobQueueTable() : base("dbo.JobQueue")
            {
            }

            internal readonly TinyIntColumn QueueType = new TinyIntColumn("QueueType");
            internal readonly BigIntColumn GroupId = new BigIntColumn("GroupId");
            internal readonly BigIntColumn JobId = new BigIntColumn("JobId");
            internal const string PartitionId = "PartitionId";
            internal readonly VarCharColumn Definition = new VarCharColumn("Definition", -1);
            internal readonly VarBinaryColumn DefinitionHash = new VarBinaryColumn("DefinitionHash", 20);
            internal readonly BigIntColumn Version = new BigIntColumn("Version");
            internal readonly TinyIntColumn Status = new TinyIntColumn("Status");
            internal readonly TinyIntColumn Priority = new TinyIntColumn("Priority");
            internal readonly NullableBigIntColumn Data = new NullableBigIntColumn("Data");
            internal readonly NullableVarCharColumn Result = new NullableVarCharColumn("Result", -1);
            internal readonly DateTimeColumn CreateDate = new DateTimeColumn("CreateDate");
            internal readonly NullableDateTimeColumn StartDate = new NullableDateTimeColumn("StartDate");
            internal readonly NullableDateTimeColumn EndDate = new NullableDateTimeColumn("EndDate");
            internal readonly DateTimeColumn HeartbeatDate = new DateTimeColumn("HeartbeatDate");
            internal readonly NullableVarCharColumn Worker = new NullableVarCharColumn("Worker", 100);
            internal readonly NullableVarCharColumn Info = new NullableVarCharColumn("Info", 1000);
            internal readonly BitColumn CancelRequested = new BitColumn("CancelRequested");
            internal readonly Index IX_QueueType_PartitionId_Status_Priority = new Index("IX_QueueType_PartitionId_Status_Priority");
            internal readonly Index IX_QueueType_GroupId = new Index("IX_QueueType_GroupId");
            internal readonly Index IX_QueueType_DefinitionHash = new Index("IX_QueueType_DefinitionHash");
        }

        internal class NumberSearchParamTable : Table
        {
            internal NumberSearchParamTable() : base("dbo.NumberSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 36, 18);
            internal readonly DecimalColumn LowValue = new DecimalColumn("LowValue", 36, 18);
            internal readonly DecimalColumn HighValue = new DecimalColumn("HighValue", 36, 18);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IXC_NumberSearchParam = new Index("IXC_NumberSearchParam");
            internal readonly Index IX_NumberSearchParam_SearchParamId_SingleValue = new Index("IX_NumberSearchParam_SearchParamId_SingleValue");
            internal readonly Index IX_NumberSearchParam_SearchParamId_LowValue_HighValue = new Index("IX_NumberSearchParam_SearchParamId_LowValue_HighValue");
            internal readonly Index IX_NumberSearchParam_SearchParamId_HighValue_LowValue = new Index("IX_NumberSearchParam_SearchParamId_HighValue_LowValue");
        }

        internal class ParametersTable : Table
        {
            internal ParametersTable() : base("dbo.Parameters")
            {
            }

            internal readonly VarCharColumn Id = new VarCharColumn("Id", 100);
            internal readonly NullableDateTimeColumn Date = new NullableDateTimeColumn("Date");
            internal readonly NullableFloatColumn Number = new NullableFloatColumn("Number");
            internal readonly NullableBigIntColumn Bigint = new NullableBigIntColumn("Bigint");
            internal readonly NullableVarCharColumn Char = new NullableVarCharColumn("Char", 4000);
            internal readonly NullableVarBinaryColumn Binary = new NullableVarBinaryColumn("Binary", -1);
            internal readonly NullableDateTimeColumn UpdatedDate = new NullableDateTimeColumn("UpdatedDate");
            internal readonly NullableNVarCharColumn UpdatedBy = new NullableNVarCharColumn("UpdatedBy", 255);
        }

        internal class ParametersHistoryTable : Table
        {
            internal ParametersHistoryTable() : base("dbo.ParametersHistory")
            {
            }

            internal readonly IntColumn ChangeId = new IntColumn("ChangeId");
            internal readonly VarCharColumn Id = new VarCharColumn("Id", 100);
            internal readonly NullableDateTimeColumn Date = new NullableDateTimeColumn("Date");
            internal readonly NullableFloatColumn Number = new NullableFloatColumn("Number");
            internal readonly NullableBigIntColumn Bigint = new NullableBigIntColumn("Bigint");
            internal readonly NullableVarCharColumn Char = new NullableVarCharColumn("Char", 4000);
            internal readonly NullableVarBinaryColumn Binary = new NullableVarBinaryColumn("Binary", -1);
            internal readonly NullableDateTimeColumn UpdatedDate = new NullableDateTimeColumn("UpdatedDate");
            internal readonly NullableNVarCharColumn UpdatedBy = new NullableNVarCharColumn("UpdatedBy", 255);
        }

        internal class QuantityCodeTable : Table
        {
            internal QuantityCodeTable() : base("dbo.QuantityCode")
            {
            }

            internal readonly IntColumn QuantityCodeId = new IntColumn("QuantityCodeId");
            internal readonly NVarCharColumn Value = new NVarCharColumn("Value", 256, "Latin1_General_100_CS_AS");
        }

        internal class QuantitySearchParamTable : Table
        {
            internal QuantitySearchParamTable() : base("dbo.QuantitySearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly NullableIntColumn QuantityCodeId = new NullableIntColumn("QuantityCodeId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 36, 18);
            internal readonly DecimalColumn LowValue = new DecimalColumn("LowValue", 36, 18);
            internal readonly DecimalColumn HighValue = new DecimalColumn("HighValue", 36, 18);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IXC_QuantitySearchParam = new Index("IXC_QuantitySearchParam");
            internal readonly Index IX_QuantitySearchParam_SearchParamId_QuantityCodeId_SingleValue = new Index("IX_QuantitySearchParam_SearchParamId_QuantityCodeId_SingleValue");
            internal readonly Index IX_QuantitySearchParam_SearchParamId_QuantityCodeId_LowValue_HighValue = new Index("IX_QuantitySearchParam_SearchParamId_QuantityCodeId_LowValue_HighValue");
            internal readonly Index IX_QuantitySearchParam_SearchParamId_QuantityCodeId_HighValue_LowValue = new Index("IX_QuantitySearchParam_SearchParamId_QuantityCodeId_HighValue_LowValue");
        }

        internal class ReferenceSearchParamTable : Table
        {
            internal ReferenceSearchParamTable() : base("dbo.ReferenceSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri = new NullableVarCharColumn("BaseUri", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableSmallIntColumn ReferenceResourceTypeId = new NullableSmallIntColumn("ReferenceResourceTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion = new NullableIntColumn("ReferenceResourceVersion");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IXC_ReferenceSearchParam = new Index("IXC_ReferenceSearchParam");
            internal readonly Index IX_ReferenceSearchParam_SearchParamId_ReferenceResourceTypeId_ReferenceResourceId_BaseUri_ReferenceResourceVersion = new Index("IX_ReferenceSearchParam_SearchParamId_ReferenceResourceTypeId_ReferenceResourceId_BaseUri_ReferenceResourceVersion");
        }

        internal class ReferenceTokenCompositeSearchParamTable : Table
        {
            internal ReferenceTokenCompositeSearchParamTable() : base("dbo.ReferenceTokenCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri1 = new NullableVarCharColumn("BaseUri1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableSmallIntColumn ReferenceResourceTypeId1 = new NullableSmallIntColumn("ReferenceResourceTypeId1");
            internal readonly VarCharColumn ReferenceResourceId1 = new VarCharColumn("ReferenceResourceId1", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion1 = new NullableIntColumn("ReferenceResourceVersion1");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 256, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow2 = new NullableVarCharColumn("CodeOverflow2", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_ReferenceTokenCompositeSearchParam = new Index("IXC_ReferenceTokenCompositeSearchParam");
            internal readonly Index IX_ReferenceTokenCompositeSearchParam_ReferenceResourceId1_Code2 = new Index("IX_ReferenceTokenCompositeSearchParam_ReferenceResourceId1_Code2");
        }

        internal class ReindexJobTable : Table
        {
            internal ReindexJobTable() : base("dbo.ReindexJob")
            {
            }

            internal readonly VarCharColumn Id = new VarCharColumn("Id", 64, "Latin1_General_100_CS_AS");
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
            internal readonly NullableDateTime2Column HeartbeatDateTime = new NullableDateTime2Column("HeartbeatDateTime", 7);
            internal readonly VarCharColumn RawJobRecord = new VarCharColumn("RawJobRecord", -1);
            internal readonly TimestampColumn JobVersion = new TimestampColumn("JobVersion");
        }

        internal class ResourceTable : Table
        {
            internal ResourceTable() : base("dbo.Resource")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly VarCharColumn ResourceId = new VarCharColumn("ResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly BitColumn IsDeleted = new BitColumn("IsDeleted");
            internal readonly NullableVarCharColumn RequestMethod = new NullableVarCharColumn("RequestMethod", 10);
            internal readonly VarBinaryColumn RawResource = new VarBinaryColumn("RawResource", -1);
            internal readonly BitColumn IsRawResourceMetaSet = new BitColumn("IsRawResourceMetaSet");
            internal readonly NullableVarCharColumn SearchParamHash = new NullableVarCharColumn("SearchParamHash", 64);
            internal readonly NullableBigIntColumn TransactionId = new NullableBigIntColumn("TransactionId");
            internal readonly NullableBigIntColumn HistoryTransactionId = new NullableBigIntColumn("HistoryTransactionId");
            internal readonly Index IX_ResourceTypeId_TransactionId = new Index("IX_ResourceTypeId_TransactionId");
            internal readonly Index IX_ResourceTypeId_HistoryTransactionId = new Index("IX_ResourceTypeId_HistoryTransactionId");
            internal readonly Index IX_Resource_ResourceTypeId_ResourceId_Version = new Index("IX_Resource_ResourceTypeId_ResourceId_Version");
            internal readonly Index IX_Resource_ResourceTypeId_ResourceId = new Index("IX_Resource_ResourceTypeId_ResourceId");
            internal readonly Index IX_Resource_ResourceTypeId_ResourceSurrgateId = new Index("IX_Resource_ResourceTypeId_ResourceSurrgateId");
        }

        internal class ResourceChangeDataTable : Table
        {
            internal ResourceChangeDataTable() : base("dbo.ResourceChangeData")
            {
            }

            internal readonly BigIntColumn Id = new BigIntColumn("Id");
            internal readonly DateTime2Column Timestamp = new DateTime2Column("Timestamp", 7);
            internal readonly VarCharColumn ResourceId = new VarCharColumn("ResourceId", 64);
            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly IntColumn ResourceVersion = new IntColumn("ResourceVersion");
            internal readonly TinyIntColumn ResourceChangeTypeId = new TinyIntColumn("ResourceChangeTypeId");
            internal readonly Index IXC_ResourceChangeData = new Index("IXC_ResourceChangeData");
        }

        internal class ResourceChangeDataStagingTable : Table
        {
            internal ResourceChangeDataStagingTable() : base("dbo.ResourceChangeDataStaging")
            {
            }

            internal readonly BigIntColumn Id = new BigIntColumn("Id");
            internal readonly DateTime2Column Timestamp = new DateTime2Column("Timestamp", 7);
            internal readonly VarCharColumn ResourceId = new VarCharColumn("ResourceId", 64);
            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly IntColumn ResourceVersion = new IntColumn("ResourceVersion");
            internal readonly TinyIntColumn ResourceChangeTypeId = new TinyIntColumn("ResourceChangeTypeId");
            internal readonly Index IXC_ResourceChangeDataStaging = new Index("IXC_ResourceChangeDataStaging");
        }

        internal class ResourceChangeTypeTable : Table
        {
            internal ResourceChangeTypeTable() : base("dbo.ResourceChangeType")
            {
            }

            internal readonly TinyIntColumn ResourceChangeTypeId = new TinyIntColumn("ResourceChangeTypeId");
            internal readonly NVarCharColumn Name = new NVarCharColumn("Name", 50);
        }

        internal class ResourceTypeTable : Table
        {
            internal ResourceTypeTable() : base("dbo.ResourceType")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly NVarCharColumn Name = new NVarCharColumn("Name", 50, "Latin1_General_100_CS_AS");
        }

        internal class ResourceWriteClaimTable : Table
        {
            internal ResourceWriteClaimTable() : base("dbo.ResourceWriteClaim")
            {
            }

            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly TinyIntColumn ClaimTypeId = new TinyIntColumn("ClaimTypeId");
            internal readonly NVarCharColumn ClaimValue = new NVarCharColumn("ClaimValue", 128);
            internal readonly Index IXC_ResourceWriteClaim = new Index("IXC_ResourceWriteClaim");
        }

        internal class SchemaMigrationProgressTable : Table
        {
            internal SchemaMigrationProgressTable() : base("dbo.SchemaMigrationProgress")
            {
            }

            internal readonly DateTime2Column Timestamp = new DateTime2Column("Timestamp", 3);
            internal readonly NVarCharColumn Message = new NVarCharColumn("Message", -1);
        }

        internal class SearchParamTable : Table
        {
            internal SearchParamTable() : base("dbo.SearchParam")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly VarCharColumn Uri = new VarCharColumn("Uri", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableVarCharColumn Status = new NullableVarCharColumn("Status", 20);
            internal readonly NullableDateTimeOffsetColumn LastUpdated = new NullableDateTimeOffsetColumn("LastUpdated", 7);
            internal readonly NullableBitColumn IsPartiallySupported = new NullableBitColumn("IsPartiallySupported");
        }

        internal class StringSearchParamTable : Table
        {
            internal StringSearchParamTable() : base("dbo.StringSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 256, "Latin1_General_100_CI_AI_SC");
            internal readonly NullableNVarCharColumn TextOverflow = new NullableNVarCharColumn("TextOverflow", -1, "Latin1_General_100_CI_AI_SC");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly BitColumn IsMin = new BitColumn("IsMin");
            internal readonly BitColumn IsMax = new BitColumn("IsMax");
            internal readonly Index IXC_StringSearchParam = new Index("IXC_StringSearchParam");
            internal readonly Index IX_StringSearchParam_SearchParamId_Text = new Index("IX_StringSearchParam_SearchParamId_Text");
            internal readonly Index IX_StringSearchParam_SearchParamId_TextWithOverflow = new Index("IX_StringSearchParam_SearchParamId_TextWithOverflow");
        }

        internal class SystemTable : Table
        {
            internal SystemTable() : base("dbo.System")
            {
            }

            internal readonly IntColumn SystemId = new IntColumn("SystemId");
            internal readonly NVarCharColumn Value = new NVarCharColumn("Value", 256);
        }

        internal class TaskInfoTable : Table
        {
            internal TaskInfoTable() : base("dbo.TaskInfo")
            {
            }

            internal readonly VarCharColumn TaskId = new VarCharColumn("TaskId", 64);
            internal readonly VarCharColumn QueueId = new VarCharColumn("QueueId", 64);
            internal readonly SmallIntColumn Status = new SmallIntColumn("Status");
            internal readonly SmallIntColumn TaskTypeId = new SmallIntColumn("TaskTypeId");
            internal readonly NullableVarCharColumn RunId = new NullableVarCharColumn("RunId", 50);
            internal readonly BitColumn IsCanceled = new BitColumn("IsCanceled");
            internal readonly SmallIntColumn RetryCount = new SmallIntColumn("RetryCount");
            internal readonly SmallIntColumn MaxRetryCount = new SmallIntColumn("MaxRetryCount");
            internal readonly NullableDateTime2Column HeartbeatDateTime = new NullableDateTime2Column("HeartbeatDateTime", 7);
            internal readonly VarCharColumn InputData = new VarCharColumn("InputData", -1);
            internal readonly NullableVarCharColumn TaskContext = new NullableVarCharColumn("TaskContext", -1);
            internal readonly NullableVarCharColumn Result = new NullableVarCharColumn("Result", -1);
            internal readonly DateTime2Column CreateDateTime = new DateTime2Column("CreateDateTime", 7);
            internal readonly NullableDateTime2Column StartDateTime = new NullableDateTime2Column("StartDateTime", 7);
            internal readonly NullableDateTime2Column EndDateTime = new NullableDateTime2Column("EndDateTime", 7);
            internal readonly NullableVarCharColumn Worker = new NullableVarCharColumn("Worker", 100);
            internal readonly NullableVarCharColumn RestartInfo = new NullableVarCharColumn("RestartInfo", -1);
            internal readonly NullableVarCharColumn ParentTaskId = new NullableVarCharColumn("ParentTaskId", 64);
            internal readonly Index IX_QueueId_Status = new Index("IX_QueueId_Status");
            internal readonly Index IX_QueueId_ParentTaskId = new Index("IX_QueueId_ParentTaskId");
        }

        internal class TokenDateTimeCompositeSearchParamTable : Table
        {
            internal TokenDateTimeCompositeSearchParamTable() : base("dbo.TokenDateTimeCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 256, "Latin1_General_100_CS_AS");
            internal readonly DateTime2Column StartDateTime2 = new DateTime2Column("StartDateTime2", 7);
            internal readonly DateTime2Column EndDateTime2 = new DateTime2Column("EndDateTime2", 7);
            internal readonly BitColumn IsLongerThanADay2 = new BitColumn("IsLongerThanADay2");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow1 = new NullableVarCharColumn("CodeOverflow1", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenDateTimeCompositeSearchParam = new Index("IXC_TokenDateTimeCompositeSearchParam");
            internal readonly Index IX_TokenDateTimeCompositeSearchParam_Code1_StartDateTime2_EndDateTime2 = new Index("IX_TokenDateTimeCompositeSearchParam_Code1_StartDateTime2_EndDateTime2");
            internal readonly Index IX_TokenDateTimeCompositeSearchParam_Code1_EndDateTime2_StartDateTime2 = new Index("IX_TokenDateTimeCompositeSearchParam_Code1_EndDateTime2_StartDateTime2");
            internal readonly Index IX_TokenDateTimeCompositeSearchParam_Code1_StartDateTime2_EndDateTime2_Long = new Index("IX_TokenDateTimeCompositeSearchParam_Code1_StartDateTime2_EndDateTime2_Long");
            internal readonly Index IX_TokenDateTimeCompositeSearchParam_Code1_EndDateTime2_StartDateTime2_Long = new Index("IX_TokenDateTimeCompositeSearchParam_Code1_EndDateTime2_StartDateTime2_Long");
        }

        internal class TokenNumberNumberCompositeSearchParamTable : Table
        {
            internal TokenNumberNumberCompositeSearchParamTable() : base("dbo.TokenNumberNumberCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 256, "Latin1_General_100_CS_AS");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 36, 18);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 36, 18);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 36, 18);
            internal readonly NullableDecimalColumn SingleValue3 = new NullableDecimalColumn("SingleValue3", 36, 18);
            internal readonly NullableDecimalColumn LowValue3 = new NullableDecimalColumn("LowValue3", 36, 18);
            internal readonly NullableDecimalColumn HighValue3 = new NullableDecimalColumn("HighValue3", 36, 18);
            internal readonly BitColumn HasRange = new BitColumn("HasRange");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow1 = new NullableVarCharColumn("CodeOverflow1", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenNumberNumberCompositeSearchParam = new Index("IXC_TokenNumberNumberCompositeSearchParam");
            internal readonly Index IX_TokenNumberNumberCompositeSearchParam_SearchParamId_Code1_Text2 = new Index("IX_TokenNumberNumberCompositeSearchParam_SearchParamId_Code1_Text2");
            internal readonly Index IX_TokenNumberNumberCompositeSearchParam_SearchParamId_Code1_LowValue2_HighValue2_LowValue3_HighValue3 = new Index("IX_TokenNumberNumberCompositeSearchParam_SearchParamId_Code1_LowValue2_HighValue2_LowValue3_HighValue3");
        }

        internal class TokenQuantityCompositeSearchParamTable : Table
        {
            internal TokenQuantityCompositeSearchParamTable() : base("dbo.TokenQuantityCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 256, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly NullableIntColumn QuantityCodeId2 = new NullableIntColumn("QuantityCodeId2");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 36, 18);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 36, 18);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 36, 18);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow1 = new NullableVarCharColumn("CodeOverflow1", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenQuantityCompositeSearchParam = new Index("IXC_TokenQuantityCompositeSearchParam");
            internal readonly Index IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_SingleValue2 = new Index("IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_SingleValue2");
            internal readonly Index IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_LowValue2_HighValue2 = new Index("IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_LowValue2_HighValue2");
            internal readonly Index IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_HighValue2_LowValue2 = new Index("IX_TokenQuantityCompositeSearchParam_SearchParamId_Code1_QuantityCodeId2_HighValue2_LowValue2");
        }

        internal class TokenSearchParamTable : Table
        {
            internal TokenSearchParamTable() : base("dbo.TokenSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly VarCharColumn Code = new VarCharColumn("Code", 256, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow = new NullableVarCharColumn("CodeOverflow", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenSearchParam = new Index("IXC_TokenSearchParam");
            internal readonly Index IX_TokenSeachParam_SearchParamId_Code_SystemId = new Index("IX_TokenSeachParam_SearchParamId_Code_SystemId");
        }

        internal class TokenStringCompositeSearchParamTable : Table
        {
            internal TokenStringCompositeSearchParamTable() : base("dbo.TokenStringCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 256, "Latin1_General_100_CS_AS");
            internal readonly NVarCharColumn Text2 = new NVarCharColumn("Text2", 256, "Latin1_General_CI_AI");
            internal readonly NullableNVarCharColumn TextOverflow2 = new NullableNVarCharColumn("TextOverflow2", -1, "Latin1_General_CI_AI");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow1 = new NullableVarCharColumn("CodeOverflow1", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenStringCompositeSearchParam = new Index("IXC_TokenStringCompositeSearchParam");
            internal readonly Index IX_TokenStringCompositeSearchParam_SearchParamId_Code1_Text2 = new Index("IX_TokenStringCompositeSearchParam_SearchParamId_Code1_Text2");
            internal readonly Index IX_TokenStringCompositeSearchParam_SearchParamId_Code1_Text2WithOverflow = new Index("IX_TokenStringCompositeSearchParam_SearchParamId_Code1_Text2WithOverflow");
        }

        internal class TokenTextTable : Table
        {
            internal TokenTextTable() : base("dbo.TokenText")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 400, "Latin1_General_CI_AI");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IXC_TokenText = new Index("IXC_TokenText");
            internal readonly Index IX_TokenText_SearchParamId_Text = new Index("IX_TokenText_SearchParamId_Text");
        }

        internal class TokenTokenCompositeSearchParamTable : Table
        {
            internal TokenTokenCompositeSearchParamTable() : base("dbo.TokenTokenCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 256, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 256, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly NullableVarCharColumn CodeOverflow1 = new NullableVarCharColumn("CodeOverflow1", -1, "Latin1_General_100_CS_AS");
            internal readonly NullableVarCharColumn CodeOverflow2 = new NullableVarCharColumn("CodeOverflow2", -1, "Latin1_General_100_CS_AS");
            internal readonly Index IXC_TokenTokenCompositeSearchParam = new Index("IXC_TokenTokenCompositeSearchParam");
            internal readonly Index IX_TokenTokenCompositeSearchParam_Code1_Code2 = new Index("IX_TokenTokenCompositeSearchParam_Code1_Code2");
        }

        internal class TransactionsTable : Table
        {
            internal TransactionsTable() : base("dbo.Transactions")
            {
            }

            internal readonly BigIntColumn SurrogateIdRangeFirstValue = new BigIntColumn("SurrogateIdRangeFirstValue");
            internal readonly BigIntColumn SurrogateIdRangeLastValue = new BigIntColumn("SurrogateIdRangeLastValue");
            internal readonly NullableVarCharColumn Definition = new NullableVarCharColumn("Definition", 2000);
            internal readonly BitColumn IsCompleted = new BitColumn("IsCompleted");
            internal readonly BitColumn IsSuccess = new BitColumn("IsSuccess");
            internal readonly BitColumn IsVisible = new BitColumn("IsVisible");
            internal readonly BitColumn IsHistoryMoved = new BitColumn("IsHistoryMoved");
            internal readonly DateTimeColumn CreateDate = new DateTimeColumn("CreateDate");
            internal readonly NullableDateTimeColumn EndDate = new NullableDateTimeColumn("EndDate");
            internal readonly NullableDateTimeColumn VisibleDate = new NullableDateTimeColumn("VisibleDate");
            internal readonly NullableDateTimeColumn HistoryMovedDate = new NullableDateTimeColumn("HistoryMovedDate");
            internal readonly DateTimeColumn HeartbeatDate = new DateTimeColumn("HeartbeatDate");
            internal readonly NullableVarCharColumn FailureReason = new NullableVarCharColumn("FailureReason", -1);
            internal readonly BitColumn IsControlledByClient = new BitColumn("IsControlledByClient");
            internal readonly NullableDateTimeColumn InvisibleHistoryRemovedDate = new NullableDateTimeColumn("InvisibleHistoryRemovedDate");
            internal readonly Index IX_IsVisible = new Index("IX_IsVisible");
        }

        internal class UriSearchParamTable : Table
        {
            internal UriSearchParamTable() : base("dbo.UriSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly VarCharColumn Uri = new VarCharColumn("Uri", 256, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly Index IXC_UriSearchParam = new Index("IXC_UriSearchParam");
            internal readonly Index IX_UriSearchParam_SearchParamId_Uri = new Index("IX_UriSearchParam_SearchParamId_Uri");
        }

        internal class WatchdogLeasesTable : Table
        {
            internal WatchdogLeasesTable() : base("dbo.WatchdogLeases")
            {
            }

            internal readonly VarCharColumn Watchdog = new VarCharColumn("Watchdog", 100);
            internal readonly VarCharColumn LeaseHolder = new VarCharColumn("LeaseHolder", 100);
            internal readonly DateTimeColumn LeaseEndTime = new DateTimeColumn("LeaseEndTime");
            internal const string RemainingLeaseTimeSec = "RemainingLeaseTimeSec";
            internal readonly VarCharColumn LeaseRequestor = new VarCharColumn("LeaseRequestor", 100);
            internal readonly DateTimeColumn LeaseRequestTime = new DateTimeColumn("LeaseRequestTime");
        }

        internal class AcquireReindexJobsProcedure : StoredProcedure
        {
            internal AcquireReindexJobsProcedure() : base("dbo.AcquireReindexJobs")
            {
            }

            private readonly ParameterDefinition<System.Int64> _jobHeartbeatTimeoutThresholdInSeconds = new ParameterDefinition<System.Int64>("@jobHeartbeatTimeoutThresholdInSeconds", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int32> _maximumNumberOfConcurrentJobsAllowed = new ParameterDefinition<System.Int32>("@maximumNumberOfConcurrentJobsAllowed", global::System.Data.SqlDbType.Int, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 jobHeartbeatTimeoutThresholdInSeconds, System.Int32 maximumNumberOfConcurrentJobsAllowed)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.AcquireReindexJobs";
                _jobHeartbeatTimeoutThresholdInSeconds.AddParameter(command.Parameters, jobHeartbeatTimeoutThresholdInSeconds);
                _maximumNumberOfConcurrentJobsAllowed.AddParameter(command.Parameters, maximumNumberOfConcurrentJobsAllowed);
            }
        }

        internal class AcquireWatchdogLeaseProcedure : StoredProcedure
        {
            internal AcquireWatchdogLeaseProcedure() : base("dbo.AcquireWatchdogLease")
            {
            }

            private readonly ParameterDefinition<System.String> _Watchdog = new ParameterDefinition<System.String>("@Watchdog", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.String> _Worker = new ParameterDefinition<System.String>("@Worker", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _AllowRebalance = new ParameterDefinition<System.Nullable<System.Boolean>>("@AllowRebalance", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _ForceAcquire = new ParameterDefinition<System.Nullable<System.Boolean>>("@ForceAcquire", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Double> _LeasePeriodSec = new ParameterDefinition<System.Double>("@LeasePeriodSec", global::System.Data.SqlDbType.Float, false);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _WorkerIsRunning = new ParameterDefinition<System.Nullable<System.Boolean>>("@WorkerIsRunning", global::System.Data.SqlDbType.Bit, true);
            private readonly OutputParameterDefinition<System.DateTime> _LeaseEndTime = new OutputParameterDefinition<System.DateTime>("@LeaseEndTime", global::System.Data.SqlDbType.DateTime, false);
            private readonly OutputParameterDefinition<System.Boolean> _IsAcquired = new OutputParameterDefinition<System.Boolean>("@IsAcquired", global::System.Data.SqlDbType.Bit, false);
            private readonly OutputParameterDefinition<System.String> _CurrentLeaseHolder = new OutputParameterDefinition<System.String>("@CurrentLeaseHolder", global::System.Data.SqlDbType.VarChar, true, 100);

            public void PopulateCommand(SqlCommandWrapper command, System.String Watchdog, System.String Worker, System.Nullable<System.Boolean> AllowRebalance, System.Nullable<System.Boolean> ForceAcquire, System.Double LeasePeriodSec, System.Nullable<System.Boolean> WorkerIsRunning, System.DateTime LeaseEndTime, System.Boolean IsAcquired, System.String CurrentLeaseHolder)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.AcquireWatchdogLease";
                _Watchdog.AddParameter(command.Parameters, Watchdog);
                _Worker.AddParameter(command.Parameters, Worker);
                _AllowRebalance.AddParameter(command.Parameters, AllowRebalance);
                _ForceAcquire.AddParameter(command.Parameters, ForceAcquire);
                _LeasePeriodSec.AddParameter(command.Parameters, LeasePeriodSec);
                _WorkerIsRunning.AddParameter(command.Parameters, WorkerIsRunning);
                _LeaseEndTime.AddParameter(command.Parameters, LeaseEndTime);
                _IsAcquired.AddParameter(command.Parameters, IsAcquired);
                _CurrentLeaseHolder.AddParameter(command.Parameters, CurrentLeaseHolder);
            }

            public System.ValueTuple<System.DateTime, System.Boolean, System.String> GetOutputs(SqlCommandWrapper command)
            {
                return global::System.ValueTuple.Create(_LeaseEndTime.GetOutputValue(command), _IsAcquired.GetOutputValue(command), _CurrentLeaseHolder.GetOutputValue(command));
            }
        }

        internal class AddPartitionOnResourceChangesProcedure : StoredProcedure
        {
            internal AddPartitionOnResourceChangesProcedure() : base("dbo.AddPartitionOnResourceChanges")
            {
            }

            private readonly OutputParameterDefinition<System.DateTime> _partitionBoundary = new OutputParameterDefinition<System.DateTime>("@partitionBoundary", global::System.Data.SqlDbType.DateTime2, false, 7);

            public void PopulateCommand(SqlCommandWrapper command, System.DateTime partitionBoundary)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.AddPartitionOnResourceChanges";
                _partitionBoundary.AddParameter(command.Parameters, partitionBoundary);
            }

            public System.DateTime GetOutputs(SqlCommandWrapper command)
            {
                return _partitionBoundary.GetOutputValue(command);
            }
        }

        internal class ArchiveJobsProcedure : StoredProcedure
        {
            internal ArchiveJobsProcedure() : base("dbo.ArchiveJobs")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.ArchiveJobs";
                _QueueType.AddParameter(command.Parameters, QueueType);
            }
        }

        internal class CaptureResourceChangesProcedure : StoredProcedure
        {
            internal CaptureResourceChangesProcedure() : base("dbo.CaptureResourceChanges")
            {
            }

            private readonly ParameterDefinition<System.Boolean> _isDeleted = new ParameterDefinition<System.Boolean>("@isDeleted", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Int32> _version = new ParameterDefinition<System.Int32>("@version", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.String> _resourceId = new ParameterDefinition<System.String>("@resourceId", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.Int16> _resourceTypeId = new ParameterDefinition<System.Int16>("@resourceTypeId", global::System.Data.SqlDbType.SmallInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Boolean isDeleted, System.Int32 version, System.String resourceId, System.Int16 resourceTypeId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CaptureResourceChanges";
                _isDeleted.AddParameter(command.Parameters, isDeleted);
                _version.AddParameter(command.Parameters, version);
                _resourceId.AddParameter(command.Parameters, resourceId);
                _resourceTypeId.AddParameter(command.Parameters, resourceTypeId);
            }
        }

        internal class CaptureResourceIdsForChangesProcedure : StoredProcedure
        {
            internal CaptureResourceIdsForChangesProcedure() : base("dbo.CaptureResourceIdsForChanges")
            {
            }

            private readonly ResourceListTableValuedParameterDefinition _Resources = new ResourceListTableValuedParameterDefinition("@Resources");

            public void PopulateCommand(SqlCommandWrapper command, global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CaptureResourceIdsForChanges";
                _Resources.AddParameter(command.Parameters, Resources);
            }

            public void PopulateCommand(SqlCommandWrapper command, CaptureResourceIdsForChangesTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, Resources: tableValuedParameters.Resources);
            }
        }

        internal class CaptureResourceIdsForChangesTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, CaptureResourceIdsForChangesTableValuedParameters>
        {
            public CaptureResourceIdsForChangesTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator)
            {
                this.ResourceListRowGenerator = ResourceListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator;

            public CaptureResourceIdsForChangesTableValuedParameters Generate(TInput input)
            {
                return new CaptureResourceIdsForChangesTableValuedParameters(ResourceListRowGenerator.GenerateRows(input));
            }
        }

        internal struct CaptureResourceIdsForChangesTableValuedParameters
        {
            internal CaptureResourceIdsForChangesTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources)
            {
                this.Resources = Resources;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources { get; }
        }

        internal class CheckActiveReindexJobsProcedure : StoredProcedure
        {
            internal CheckActiveReindexJobsProcedure() : base("dbo.CheckActiveReindexJobs")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CheckActiveReindexJobs";
            }
        }

        internal class CleanupEventLogProcedure : StoredProcedure
        {
            internal CleanupEventLogProcedure() : base("dbo.CleanupEventLog")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CleanupEventLog";
            }
        }

        internal class ConfigurePartitionOnResourceChangesProcedure : StoredProcedure
        {
            internal ConfigurePartitionOnResourceChangesProcedure() : base("dbo.ConfigurePartitionOnResourceChanges")
            {
            }

            private readonly ParameterDefinition<System.Int32> _numberOfFuturePartitionsToAdd = new ParameterDefinition<System.Int32>("@numberOfFuturePartitionsToAdd", global::System.Data.SqlDbType.Int, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int32 numberOfFuturePartitionsToAdd)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.ConfigurePartitionOnResourceChanges";
                _numberOfFuturePartitionsToAdd.AddParameter(command.Parameters, numberOfFuturePartitionsToAdd);
            }
        }

        internal class CreateReindexJobProcedure : StoredProcedure
        {
            internal CreateReindexJobProcedure() : base("dbo.CreateReindexJob")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<System.String> _rawJobRecord = new ParameterDefinition<System.String>("@rawJobRecord", global::System.Data.SqlDbType.VarChar, false, -1);

            public void PopulateCommand(SqlCommandWrapper command, System.String id, System.String status, System.String rawJobRecord)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CreateReindexJob";
                _id.AddParameter(command.Parameters, id);
                _status.AddParameter(command.Parameters, status);
                _rawJobRecord.AddParameter(command.Parameters, rawJobRecord);
            }
        }

        internal class DefragProcedure : StoredProcedure
        {
            internal DefragProcedure() : base("dbo.Defrag")
            {
            }

            private readonly ParameterDefinition<System.String> _TableName = new ParameterDefinition<System.String>("@TableName", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.String> _IndexName = new ParameterDefinition<System.String>("@IndexName", global::System.Data.SqlDbType.VarChar, false, 200);
            private readonly ParameterDefinition<System.Int32> _PartitionNumber = new ParameterDefinition<System.Int32>("@PartitionNumber", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.Boolean> _IsPartitioned = new ParameterDefinition<System.Boolean>("@IsPartitioned", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.String TableName, System.String IndexName, System.Int32 PartitionNumber, System.Boolean IsPartitioned)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.Defrag";
                _TableName.AddParameter(command.Parameters, TableName);
                _IndexName.AddParameter(command.Parameters, IndexName);
                _PartitionNumber.AddParameter(command.Parameters, PartitionNumber);
                _IsPartitioned.AddParameter(command.Parameters, IsPartitioned);
            }
        }

        internal class DefragChangeDatabaseSettingsProcedure : StoredProcedure
        {
            internal DefragChangeDatabaseSettingsProcedure() : base("dbo.DefragChangeDatabaseSettings")
            {
            }

            private readonly ParameterDefinition<System.Boolean> _IsOn = new ParameterDefinition<System.Boolean>("@IsOn", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Boolean IsOn)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.DefragChangeDatabaseSettings";
                _IsOn.AddParameter(command.Parameters, IsOn);
            }
        }

        internal class DeleteHistoryProcedure : StoredProcedure
        {
            internal DeleteHistoryProcedure() : base("dbo.DeleteHistory")
            {
            }

            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _DeleteResources = new ParameterDefinition<System.Nullable<System.Boolean>>("@DeleteResources", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _Reset = new ParameterDefinition<System.Nullable<System.Boolean>>("@Reset", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _DisableLogEvent = new ParameterDefinition<System.Nullable<System.Boolean>>("@DisableLogEvent", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Boolean> DeleteResources, System.Nullable<System.Boolean> Reset, System.Nullable<System.Boolean> DisableLogEvent)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.DeleteHistory";
                _DeleteResources.AddParameter(command.Parameters, DeleteResources);
                _Reset.AddParameter(command.Parameters, Reset);
                _DisableLogEvent.AddParameter(command.Parameters, DisableLogEvent);
            }
        }

        internal class DequeueJobProcedure : StoredProcedure
        {
            internal DequeueJobProcedure() : base("dbo.DequeueJob")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.String> _Worker = new ParameterDefinition<System.String>("@Worker", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.Int32> _HeartbeatTimeoutSec = new ParameterDefinition<System.Int32>("@HeartbeatTimeoutSec", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _InputJobId = new ParameterDefinition<System.Nullable<System.Int64>>("@InputJobId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _CheckTimeoutJobs = new ParameterDefinition<System.Nullable<System.Boolean>>("@CheckTimeoutJobs", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.String Worker, System.Int32 HeartbeatTimeoutSec, System.Nullable<System.Int64> InputJobId, System.Nullable<System.Boolean> CheckTimeoutJobs)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.DequeueJob";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _Worker.AddParameter(command.Parameters, Worker);
                _HeartbeatTimeoutSec.AddParameter(command.Parameters, HeartbeatTimeoutSec);
                _InputJobId.AddParameter(command.Parameters, InputJobId);
                _CheckTimeoutJobs.AddParameter(command.Parameters, CheckTimeoutJobs);
            }
        }

        internal class DisableIndexProcedure : StoredProcedure
        {
            internal DisableIndexProcedure() : base("dbo.DisableIndex")
            {
            }

            private readonly ParameterDefinition<System.String> _tableName = new ParameterDefinition<System.String>("@tableName", global::System.Data.SqlDbType.NVarChar, false, 128);
            private readonly ParameterDefinition<System.String> _indexName = new ParameterDefinition<System.String>("@indexName", global::System.Data.SqlDbType.NVarChar, false, 128);

            public void PopulateCommand(SqlCommandWrapper command, System.String tableName, System.String indexName)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.DisableIndex";
                _tableName.AddParameter(command.Parameters, tableName);
                _indexName.AddParameter(command.Parameters, indexName);
            }
        }

        internal class DisableIndexesProcedure : StoredProcedure
        {
            internal DisableIndexesProcedure() : base("dbo.DisableIndexes")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.DisableIndexes";
            }
        }

        internal class EnqueueJobsProcedure : StoredProcedure
        {
            internal EnqueueJobsProcedure() : base("dbo.EnqueueJobs")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly StringListTableValuedParameterDefinition _Definitions = new StringListTableValuedParameterDefinition("@Definitions");
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GroupId = new ParameterDefinition<System.Nullable<System.Int64>>("@GroupId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _ForceOneActiveJobGroup = new ParameterDefinition<System.Nullable<System.Boolean>>("@ForceOneActiveJobGroup", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _IsCompleted = new ParameterDefinition<System.Nullable<System.Boolean>>("@IsCompleted", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _ReturnJobs = new ParameterDefinition<System.Nullable<System.Boolean>>("@ReturnJobs", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, global::System.Collections.Generic.IEnumerable<StringListRow> Definitions, System.Nullable<System.Int64> GroupId, System.Nullable<System.Boolean> ForceOneActiveJobGroup, System.Nullable<System.Boolean> IsCompleted, System.Nullable<System.Boolean> ReturnJobs)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.EnqueueJobs";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _Definitions.AddParameter(command.Parameters, Definitions);
                _GroupId.AddParameter(command.Parameters, GroupId);
                _ForceOneActiveJobGroup.AddParameter(command.Parameters, ForceOneActiveJobGroup);
                _IsCompleted.AddParameter(command.Parameters, IsCompleted);
                _ReturnJobs.AddParameter(command.Parameters, ReturnJobs);
            }

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Nullable<System.Int64> GroupId, System.Nullable<System.Boolean> ForceOneActiveJobGroup, System.Nullable<System.Boolean> IsCompleted, System.Nullable<System.Boolean> ReturnJobs, EnqueueJobsTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, QueueType: QueueType, GroupId: GroupId, ForceOneActiveJobGroup: ForceOneActiveJobGroup, IsCompleted: IsCompleted, ReturnJobs: ReturnJobs, Definitions: tableValuedParameters.Definitions);
            }
        }

        internal class EnqueueJobsTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, EnqueueJobsTableValuedParameters>
        {
            public EnqueueJobsTvpGenerator(ITableValuedParameterRowGenerator<TInput, StringListRow> StringListRowGenerator)
            {
                this.StringListRowGenerator = StringListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, StringListRow> StringListRowGenerator;

            public EnqueueJobsTableValuedParameters Generate(TInput input)
            {
                return new EnqueueJobsTableValuedParameters(StringListRowGenerator.GenerateRows(input));
            }
        }

        internal struct EnqueueJobsTableValuedParameters
        {
            internal EnqueueJobsTableValuedParameters(global::System.Collections.Generic.IEnumerable<StringListRow> Definitions)
            {
                this.Definitions = Definitions;
            }

            internal global::System.Collections.Generic.IEnumerable<StringListRow> Definitions { get; }
        }

        internal class ExecuteCommandForRebuildIndexesProcedure : StoredProcedure
        {
            internal ExecuteCommandForRebuildIndexesProcedure() : base("dbo.ExecuteCommandForRebuildIndexes")
            {
            }

            private readonly ParameterDefinition<System.String> _Tbl = new ParameterDefinition<System.String>("@Tbl", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.String> _Ind = new ParameterDefinition<System.String>("@Ind", global::System.Data.SqlDbType.VarChar, false, 1000);
            private readonly ParameterDefinition<System.String> _Cmd = new ParameterDefinition<System.String>("@Cmd", global::System.Data.SqlDbType.VarChar, false, -1);

            public void PopulateCommand(SqlCommandWrapper command, System.String Tbl, System.String Ind, System.String Cmd)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.ExecuteCommandForRebuildIndexes";
                _Tbl.AddParameter(command.Parameters, Tbl);
                _Ind.AddParameter(command.Parameters, Ind);
                _Cmd.AddParameter(command.Parameters, Cmd);
            }
        }

        internal class FetchEventAgentCheckpointProcedure : StoredProcedure
        {
            internal FetchEventAgentCheckpointProcedure() : base("dbo.FetchEventAgentCheckpoint")
            {
            }

            private readonly ParameterDefinition<System.String> _CheckpointId = new ParameterDefinition<System.String>("@CheckpointId", global::System.Data.SqlDbType.VarChar, false, 64);

            public void PopulateCommand(SqlCommandWrapper command, System.String CheckpointId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.FetchEventAgentCheckpoint";
                _CheckpointId.AddParameter(command.Parameters, CheckpointId);
            }
        }

        internal class FetchResourceChangesProcedure : StoredProcedure
        {
            internal FetchResourceChangesProcedure() : base("dbo.FetchResourceChanges_3")
            {
            }

            private readonly ParameterDefinition<System.Int64> _startId = new ParameterDefinition<System.Int64>("@startId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.DateTime> _lastProcessedUtcDateTime = new ParameterDefinition<System.DateTime>("@lastProcessedUtcDateTime", global::System.Data.SqlDbType.DateTime2, false, 7);
            private readonly ParameterDefinition<System.Int16> _pageSize = new ParameterDefinition<System.Int16>("@pageSize", global::System.Data.SqlDbType.SmallInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 startId, System.DateTime lastProcessedUtcDateTime, System.Int16 pageSize)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.FetchResourceChanges_3";
                _startId.AddParameter(command.Parameters, startId);
                _lastProcessedUtcDateTime.AddParameter(command.Parameters, lastProcessedUtcDateTime);
                _pageSize.AddParameter(command.Parameters, pageSize);
            }
        }

        internal class GetActiveJobsProcedure : StoredProcedure
        {
            internal GetActiveJobsProcedure() : base("dbo.GetActiveJobs")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GroupId = new ParameterDefinition<System.Nullable<System.Int64>>("@GroupId", global::System.Data.SqlDbType.BigInt, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Nullable<System.Int64> GroupId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetActiveJobs";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _GroupId.AddParameter(command.Parameters, GroupId);
            }
        }

        internal class GetCommandsForRebuildIndexesProcedure : StoredProcedure
        {
            internal GetCommandsForRebuildIndexesProcedure() : base("dbo.GetCommandsForRebuildIndexes")
            {
            }

            private readonly ParameterDefinition<System.Boolean> _RebuildClustered = new ParameterDefinition<System.Boolean>("@RebuildClustered", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Boolean RebuildClustered)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetCommandsForRebuildIndexes";
                _RebuildClustered.AddParameter(command.Parameters, RebuildClustered);
            }
        }

        internal class GetIndexCommandsProcedure : StoredProcedure
        {
            internal GetIndexCommandsProcedure() : base("dbo.GetIndexCommands")
            {
            }

            private readonly ParameterDefinition<System.String> _Tbl = new ParameterDefinition<System.String>("@Tbl", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.String> _Ind = new ParameterDefinition<System.String>("@Ind", global::System.Data.SqlDbType.VarChar, false, 200);
            private readonly ParameterDefinition<System.Boolean> _AddPartClause = new ParameterDefinition<System.Boolean>("@AddPartClause", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Boolean> _IncludeClustered = new ParameterDefinition<System.Boolean>("@IncludeClustered", global::System.Data.SqlDbType.Bit, false);
            private readonly OutputParameterDefinition<System.String> _Txt = new OutputParameterDefinition<System.String>("@Txt", global::System.Data.SqlDbType.VarChar, true, -1);

            public void PopulateCommand(SqlCommandWrapper command, System.String Tbl, System.String Ind, System.Boolean AddPartClause, System.Boolean IncludeClustered, System.String Txt)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetIndexCommands";
                _Tbl.AddParameter(command.Parameters, Tbl);
                _Ind.AddParameter(command.Parameters, Ind);
                _AddPartClause.AddParameter(command.Parameters, AddPartClause);
                _IncludeClustered.AddParameter(command.Parameters, IncludeClustered);
                _Txt.AddParameter(command.Parameters, Txt);
            }

            public System.String GetOutputs(SqlCommandWrapper command)
            {
                return _Txt.GetOutputValue(command);
            }
        }

        internal class GetJobsProcedure : StoredProcedure
        {
            internal GetJobsProcedure() : base("dbo.GetJobs")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _JobId = new ParameterDefinition<System.Nullable<System.Int64>>("@JobId", global::System.Data.SqlDbType.BigInt, true);
            private readonly BigintListTableValuedParameterDefinition _JobIds = new BigintListTableValuedParameterDefinition("@JobIds");
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GroupId = new ParameterDefinition<System.Nullable<System.Int64>>("@GroupId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _ReturnDefinition = new ParameterDefinition<System.Nullable<System.Boolean>>("@ReturnDefinition", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Nullable<System.Int64> JobId, global::System.Collections.Generic.IEnumerable<BigintListRow> JobIds, System.Nullable<System.Int64> GroupId, System.Nullable<System.Boolean> ReturnDefinition)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetJobs";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _JobId.AddParameter(command.Parameters, JobId);
                _JobIds.AddParameter(command.Parameters, JobIds);
                _GroupId.AddParameter(command.Parameters, GroupId);
                _ReturnDefinition.AddParameter(command.Parameters, ReturnDefinition);
            }

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Nullable<System.Int64> JobId, System.Nullable<System.Int64> GroupId, System.Nullable<System.Boolean> ReturnDefinition, GetJobsTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, QueueType: QueueType, JobId: JobId, GroupId: GroupId, ReturnDefinition: ReturnDefinition, JobIds: tableValuedParameters.JobIds);
            }
        }

        internal class GetJobsTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, GetJobsTableValuedParameters>
        {
            public GetJobsTvpGenerator(ITableValuedParameterRowGenerator<TInput, BigintListRow> BigintListRowGenerator)
            {
                this.BigintListRowGenerator = BigintListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, BigintListRow> BigintListRowGenerator;

            public GetJobsTableValuedParameters Generate(TInput input)
            {
                return new GetJobsTableValuedParameters(BigintListRowGenerator.GenerateRows(input));
            }
        }

        internal struct GetJobsTableValuedParameters
        {
            internal GetJobsTableValuedParameters(global::System.Collections.Generic.IEnumerable<BigintListRow> JobIds)
            {
                this.JobIds = JobIds;
            }

            internal global::System.Collections.Generic.IEnumerable<BigintListRow> JobIds { get; }
        }

        internal class GetNonCompletedJobCountOfSpecificQueueTypeProcedure : StoredProcedure
        {
            internal GetNonCompletedJobCountOfSpecificQueueTypeProcedure() : base("dbo.GetNonCompletedJobCountOfSpecificQueueType")
            {
            }

            private readonly ParameterDefinition<System.Byte> _queueType = new ParameterDefinition<System.Byte>("@queueType", global::System.Data.SqlDbType.TinyInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte queueType)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetNonCompletedJobCountOfSpecificQueueType";
                _queueType.AddParameter(command.Parameters, queueType);
            }
        }

        internal class GetPartitionedTablesProcedure : StoredProcedure
        {
            internal GetPartitionedTablesProcedure() : base("dbo.GetPartitionedTables")
            {
            }

            private readonly ParameterDefinition<System.Boolean> _IncludeNotDisabled = new ParameterDefinition<System.Boolean>("@IncludeNotDisabled", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Boolean> _IncludeNotSupported = new ParameterDefinition<System.Boolean>("@IncludeNotSupported", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Boolean IncludeNotDisabled, System.Boolean IncludeNotSupported)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetPartitionedTables";
                _IncludeNotDisabled.AddParameter(command.Parameters, IncludeNotDisabled);
                _IncludeNotSupported.AddParameter(command.Parameters, IncludeNotSupported);
            }
        }

        internal class GetReindexJobByIdProcedure : StoredProcedure
        {
            internal GetReindexJobByIdProcedure() : base("dbo.GetReindexJobById")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);

            public void PopulateCommand(SqlCommandWrapper command, System.String id)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetReindexJobById";
                _id.AddParameter(command.Parameters, id);
            }
        }

        internal class GetResourceSurrogateIdRangesProcedure : StoredProcedure
        {
            internal GetResourceSurrogateIdRangesProcedure() : base("dbo.GetResourceSurrogateIdRanges")
            {
            }

            private readonly ParameterDefinition<System.Int16> _ResourceTypeId = new ParameterDefinition<System.Int16>("@ResourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.Int64> _StartId = new ParameterDefinition<System.Int64>("@StartId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int64> _EndId = new ParameterDefinition<System.Int64>("@EndId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int32> _RangeSize = new ParameterDefinition<System.Int32>("@RangeSize", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.Nullable<System.Int32>> _NumberOfRanges = new ParameterDefinition<System.Nullable<System.Int32>>("@NumberOfRanges", global::System.Data.SqlDbType.Int, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _Up = new ParameterDefinition<System.Nullable<System.Boolean>>("@Up", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int16 ResourceTypeId, System.Int64 StartId, System.Int64 EndId, System.Int32 RangeSize, System.Nullable<System.Int32> NumberOfRanges, System.Nullable<System.Boolean> Up)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetResourceSurrogateIdRanges";
                _ResourceTypeId.AddParameter(command.Parameters, ResourceTypeId);
                _StartId.AddParameter(command.Parameters, StartId);
                _EndId.AddParameter(command.Parameters, EndId);
                _RangeSize.AddParameter(command.Parameters, RangeSize);
                _NumberOfRanges.AddParameter(command.Parameters, NumberOfRanges);
                _Up.AddParameter(command.Parameters, Up);
            }
        }

        internal class GetResourceVersionsProcedure : StoredProcedure
        {
            internal GetResourceVersionsProcedure() : base("dbo.GetResourceVersions")
            {
            }

            private readonly ResourceDateKeyListTableValuedParameterDefinition _ResourceDateKeys = new ResourceDateKeyListTableValuedParameterDefinition("@ResourceDateKeys");

            public void PopulateCommand(SqlCommandWrapper command, global::System.Collections.Generic.IEnumerable<ResourceDateKeyListRow> ResourceDateKeys)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetResourceVersions";
                _ResourceDateKeys.AddParameter(command.Parameters, ResourceDateKeys);
            }

            public void PopulateCommand(SqlCommandWrapper command, GetResourceVersionsTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, ResourceDateKeys: tableValuedParameters.ResourceDateKeys);
            }
        }

        internal class GetResourceVersionsTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, GetResourceVersionsTableValuedParameters>
        {
            public GetResourceVersionsTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceDateKeyListRow> ResourceDateKeyListRowGenerator)
            {
                this.ResourceDateKeyListRowGenerator = ResourceDateKeyListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceDateKeyListRow> ResourceDateKeyListRowGenerator;

            public GetResourceVersionsTableValuedParameters Generate(TInput input)
            {
                return new GetResourceVersionsTableValuedParameters(ResourceDateKeyListRowGenerator.GenerateRows(input));
            }
        }

        internal struct GetResourceVersionsTableValuedParameters
        {
            internal GetResourceVersionsTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceDateKeyListRow> ResourceDateKeys)
            {
                this.ResourceDateKeys = ResourceDateKeys;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceDateKeyListRow> ResourceDateKeys { get; }
        }

        internal class GetResourcesProcedure : StoredProcedure
        {
            internal GetResourcesProcedure() : base("dbo.GetResources")
            {
            }

            private readonly ResourceKeyListTableValuedParameterDefinition _ResourceKeys = new ResourceKeyListTableValuedParameterDefinition("@ResourceKeys");

            public void PopulateCommand(SqlCommandWrapper command, global::System.Collections.Generic.IEnumerable<ResourceKeyListRow> ResourceKeys)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetResources";
                _ResourceKeys.AddParameter(command.Parameters, ResourceKeys);
            }

            public void PopulateCommand(SqlCommandWrapper command, GetResourcesTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, ResourceKeys: tableValuedParameters.ResourceKeys);
            }
        }

        internal class GetResourcesTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, GetResourcesTableValuedParameters>
        {
            public GetResourcesTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceKeyListRow> ResourceKeyListRowGenerator)
            {
                this.ResourceKeyListRowGenerator = ResourceKeyListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceKeyListRow> ResourceKeyListRowGenerator;

            public GetResourcesTableValuedParameters Generate(TInput input)
            {
                return new GetResourcesTableValuedParameters(ResourceKeyListRowGenerator.GenerateRows(input));
            }
        }

        internal struct GetResourcesTableValuedParameters
        {
            internal GetResourcesTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceKeyListRow> ResourceKeys)
            {
                this.ResourceKeys = ResourceKeys;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceKeyListRow> ResourceKeys { get; }
        }

        internal class GetResourcesByTransactionIdProcedure : StoredProcedure
        {
            internal GetResourcesByTransactionIdProcedure() : base("dbo.GetResourcesByTransactionId")
            {
            }

            private readonly ParameterDefinition<System.Int64> _TransactionId = new ParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _IncludeHistory = new ParameterDefinition<System.Nullable<System.Boolean>>("@IncludeHistory", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _ReturnResourceKeysOnly = new ParameterDefinition<System.Nullable<System.Boolean>>("@ReturnResourceKeysOnly", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId, System.Nullable<System.Boolean> IncludeHistory, System.Nullable<System.Boolean> ReturnResourceKeysOnly)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetResourcesByTransactionId";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
                _IncludeHistory.AddParameter(command.Parameters, IncludeHistory);
                _ReturnResourceKeysOnly.AddParameter(command.Parameters, ReturnResourceKeysOnly);
            }
        }

        internal class GetResourcesByTypeAndSurrogateIdRangeProcedure : StoredProcedure
        {
            internal GetResourcesByTypeAndSurrogateIdRangeProcedure() : base("dbo.GetResourcesByTypeAndSurrogateIdRange")
            {
            }

            private readonly ParameterDefinition<System.Int16> _ResourceTypeId = new ParameterDefinition<System.Int16>("@ResourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.Int64> _StartId = new ParameterDefinition<System.Int64>("@StartId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int64> _EndId = new ParameterDefinition<System.Int64>("@EndId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GlobalStartId = new ParameterDefinition<System.Nullable<System.Int64>>("@GlobalStartId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GlobalEndId = new ParameterDefinition<System.Nullable<System.Int64>>("@GlobalEndId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _IncludeHistory = new ParameterDefinition<System.Nullable<System.Boolean>>("@IncludeHistory", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _IncludeDeleted = new ParameterDefinition<System.Nullable<System.Boolean>>("@IncludeDeleted", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int16 ResourceTypeId, System.Int64 StartId, System.Int64 EndId, System.Nullable<System.Int64> GlobalStartId, System.Nullable<System.Int64> GlobalEndId, System.Nullable<System.Boolean> IncludeHistory, System.Nullable<System.Boolean> IncludeDeleted)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetResourcesByTypeAndSurrogateIdRange";
                _ResourceTypeId.AddParameter(command.Parameters, ResourceTypeId);
                _StartId.AddParameter(command.Parameters, StartId);
                _EndId.AddParameter(command.Parameters, EndId);
                _GlobalStartId.AddParameter(command.Parameters, GlobalStartId);
                _GlobalEndId.AddParameter(command.Parameters, GlobalEndId);
                _IncludeHistory.AddParameter(command.Parameters, IncludeHistory);
                _IncludeDeleted.AddParameter(command.Parameters, IncludeDeleted);
            }
        }

        internal class GetSearchParamStatusesProcedure : StoredProcedure
        {
            internal GetSearchParamStatusesProcedure() : base("dbo.GetSearchParamStatuses")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetSearchParamStatuses";
            }
        }

        internal class GetTransactionsProcedure : StoredProcedure
        {
            internal GetTransactionsProcedure() : base("dbo.GetTransactions")
            {
            }

            private readonly ParameterDefinition<System.Int64> _StartNotInclusiveTranId = new ParameterDefinition<System.Int64>("@StartNotInclusiveTranId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int64> _EndInclusiveTranId = new ParameterDefinition<System.Int64>("@EndInclusiveTranId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Nullable<System.DateTime>> _EndDate = new ParameterDefinition<System.Nullable<System.DateTime>>("@EndDate", global::System.Data.SqlDbType.DateTime, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 StartNotInclusiveTranId, System.Int64 EndInclusiveTranId, System.Nullable<System.DateTime> EndDate)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetTransactions";
                _StartNotInclusiveTranId.AddParameter(command.Parameters, StartNotInclusiveTranId);
                _EndInclusiveTranId.AddParameter(command.Parameters, EndInclusiveTranId);
                _EndDate.AddParameter(command.Parameters, EndDate);
            }
        }

        internal class GetUsedResourceTypesProcedure : StoredProcedure
        {
            internal GetUsedResourceTypesProcedure() : base("dbo.GetUsedResourceTypes")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetUsedResourceTypes";
            }
        }

        internal class HardDeleteResourceProcedure : StoredProcedure
        {
            internal HardDeleteResourceProcedure() : base("dbo.HardDeleteResource")
            {
            }

            private readonly ParameterDefinition<System.Int16> _ResourceTypeId = new ParameterDefinition<System.Int16>("@ResourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.String> _ResourceId = new ParameterDefinition<System.String>("@ResourceId", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.Boolean> _KeepCurrentVersion = new ParameterDefinition<System.Boolean>("@KeepCurrentVersion", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Boolean> _IsResourceChangeCaptureEnabled = new ParameterDefinition<System.Boolean>("@IsResourceChangeCaptureEnabled", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int16 ResourceTypeId, System.String ResourceId, System.Boolean KeepCurrentVersion, System.Boolean IsResourceChangeCaptureEnabled)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.HardDeleteResource";
                _ResourceTypeId.AddParameter(command.Parameters, ResourceTypeId);
                _ResourceId.AddParameter(command.Parameters, ResourceId);
                _KeepCurrentVersion.AddParameter(command.Parameters, KeepCurrentVersion);
                _IsResourceChangeCaptureEnabled.AddParameter(command.Parameters, IsResourceChangeCaptureEnabled);
            }
        }

        internal class InitDefragProcedure : StoredProcedure
        {
            internal InitDefragProcedure() : base("dbo.InitDefrag")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Int64> _GroupId = new ParameterDefinition<System.Int64>("@GroupId", global::System.Data.SqlDbType.BigInt, false);
            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _DefragItems = new OutputParameterDefinition<System.Nullable<System.Int32>>("@DefragItems", global::System.Data.SqlDbType.Int, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Int64 GroupId, System.Nullable<System.Int32> DefragItems)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.InitDefrag";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _GroupId.AddParameter(command.Parameters, GroupId);
                _DefragItems.AddParameter(command.Parameters, DefragItems);
            }

            public System.Nullable<System.Int32> GetOutputs(SqlCommandWrapper command)
            {
                return _DefragItems.GetOutputValue(command);
            }
        }

        internal class InitializeIndexPropertiesProcedure : StoredProcedure
        {
            internal InitializeIndexPropertiesProcedure() : base("dbo.InitializeIndexProperties")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.InitializeIndexProperties";
            }
        }

        internal class LogEventProcedure : StoredProcedure
        {
            internal LogEventProcedure() : base("dbo.LogEvent")
            {
            }

            private readonly ParameterDefinition<System.String> _Process = new ParameterDefinition<System.String>("@Process", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.String> _Status = new ParameterDefinition<System.String>("@Status", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<System.String> _Mode = new ParameterDefinition<System.String>("@Mode", global::System.Data.SqlDbType.VarChar, true, 200);
            private readonly ParameterDefinition<System.String> _Action = new ParameterDefinition<System.String>("@Action", global::System.Data.SqlDbType.VarChar, true, 20);
            private readonly ParameterDefinition<System.String> _Target = new ParameterDefinition<System.String>("@Target", global::System.Data.SqlDbType.VarChar, true, 100);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _Rows = new ParameterDefinition<System.Nullable<System.Int64>>("@Rows", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.DateTime>> _Start = new ParameterDefinition<System.Nullable<System.DateTime>>("@Start", global::System.Data.SqlDbType.DateTime, true);
            private readonly ParameterDefinition<System.String> _Text = new ParameterDefinition<System.String>("@Text", global::System.Data.SqlDbType.NVarChar, true, 3500);
            private readonly OutputParameterDefinition<System.Nullable<System.Int64>> _EventId = new OutputParameterDefinition<System.Nullable<System.Int64>>("@EventId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Int32>> _Retry = new ParameterDefinition<System.Nullable<System.Int32>>("@Retry", global::System.Data.SqlDbType.Int, true);

            public void PopulateCommand(SqlCommandWrapper command, System.String Process, System.String Status, System.String Mode, System.String Action, System.String Target, System.Nullable<System.Int64> Rows, System.Nullable<System.DateTime> Start, System.String Text, System.Nullable<System.Int64> EventId, System.Nullable<System.Int32> Retry)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.LogEvent";
                _Process.AddParameter(command.Parameters, Process);
                _Status.AddParameter(command.Parameters, Status);
                _Mode.AddParameter(command.Parameters, Mode);
                _Action.AddParameter(command.Parameters, Action);
                _Target.AddParameter(command.Parameters, Target);
                _Rows.AddParameter(command.Parameters, Rows);
                _Start.AddParameter(command.Parameters, Start);
                _Text.AddParameter(command.Parameters, Text);
                _EventId.AddParameter(command.Parameters, EventId);
                _Retry.AddParameter(command.Parameters, Retry);
            }

            public System.Nullable<System.Int64> GetOutputs(SqlCommandWrapper command)
            {
                return _EventId.GetOutputValue(command);
            }
        }

        internal class LogSchemaMigrationProgressProcedure : StoredProcedure
        {
            internal LogSchemaMigrationProgressProcedure() : base("dbo.LogSchemaMigrationProgress")
            {
            }

            private readonly ParameterDefinition<System.String> _message = new ParameterDefinition<System.String>("@message", global::System.Data.SqlDbType.VarChar, false, -1);

            public void PopulateCommand(SqlCommandWrapper command, System.String message)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.LogSchemaMigrationProgress";
                _message.AddParameter(command.Parameters, message);
            }
        }

        internal class MergeResourcesProcedure : StoredProcedure
        {
            internal MergeResourcesProcedure() : base("dbo.MergeResources")
            {
            }

            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _AffectedRows = new OutputParameterDefinition<System.Nullable<System.Int32>>("@AffectedRows", global::System.Data.SqlDbType.Int, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _RaiseExceptionOnConflict = new ParameterDefinition<System.Nullable<System.Boolean>>("@RaiseExceptionOnConflict", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _IsResourceChangeCaptureEnabled = new ParameterDefinition<System.Nullable<System.Boolean>>("@IsResourceChangeCaptureEnabled", global::System.Data.SqlDbType.Bit, true);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _TransactionId = new ParameterDefinition<System.Nullable<System.Int64>>("@TransactionId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _SingleTransaction = new ParameterDefinition<System.Nullable<System.Boolean>>("@SingleTransaction", global::System.Data.SqlDbType.Bit, true);
            private readonly ResourceListTableValuedParameterDefinition _Resources = new ResourceListTableValuedParameterDefinition("@Resources");
            private readonly ResourceWriteClaimListTableValuedParameterDefinition _ResourceWriteClaims = new ResourceWriteClaimListTableValuedParameterDefinition("@ResourceWriteClaims");
            private readonly ReferenceSearchParamListTableValuedParameterDefinition _ReferenceSearchParams = new ReferenceSearchParamListTableValuedParameterDefinition("@ReferenceSearchParams");
            private readonly TokenSearchParamListTableValuedParameterDefinition _TokenSearchParams = new TokenSearchParamListTableValuedParameterDefinition("@TokenSearchParams");
            private readonly TokenTextListTableValuedParameterDefinition _TokenTexts = new TokenTextListTableValuedParameterDefinition("@TokenTexts");
            private readonly StringSearchParamListTableValuedParameterDefinition _StringSearchParams = new StringSearchParamListTableValuedParameterDefinition("@StringSearchParams");
            private readonly UriSearchParamListTableValuedParameterDefinition _UriSearchParams = new UriSearchParamListTableValuedParameterDefinition("@UriSearchParams");
            private readonly NumberSearchParamListTableValuedParameterDefinition _NumberSearchParams = new NumberSearchParamListTableValuedParameterDefinition("@NumberSearchParams");
            private readonly QuantitySearchParamListTableValuedParameterDefinition _QuantitySearchParams = new QuantitySearchParamListTableValuedParameterDefinition("@QuantitySearchParams");
            private readonly DateTimeSearchParamListTableValuedParameterDefinition _DateTimeSearchParms = new DateTimeSearchParamListTableValuedParameterDefinition("@DateTimeSearchParms");
            private readonly ReferenceTokenCompositeSearchParamListTableValuedParameterDefinition _ReferenceTokenCompositeSearchParams = new ReferenceTokenCompositeSearchParamListTableValuedParameterDefinition("@ReferenceTokenCompositeSearchParams");
            private readonly TokenTokenCompositeSearchParamListTableValuedParameterDefinition _TokenTokenCompositeSearchParams = new TokenTokenCompositeSearchParamListTableValuedParameterDefinition("@TokenTokenCompositeSearchParams");
            private readonly TokenDateTimeCompositeSearchParamListTableValuedParameterDefinition _TokenDateTimeCompositeSearchParams = new TokenDateTimeCompositeSearchParamListTableValuedParameterDefinition("@TokenDateTimeCompositeSearchParams");
            private readonly TokenQuantityCompositeSearchParamListTableValuedParameterDefinition _TokenQuantityCompositeSearchParams = new TokenQuantityCompositeSearchParamListTableValuedParameterDefinition("@TokenQuantityCompositeSearchParams");
            private readonly TokenStringCompositeSearchParamListTableValuedParameterDefinition _TokenStringCompositeSearchParams = new TokenStringCompositeSearchParamListTableValuedParameterDefinition("@TokenStringCompositeSearchParams");
            private readonly TokenNumberNumberCompositeSearchParamListTableValuedParameterDefinition _TokenNumberNumberCompositeSearchParams = new TokenNumberNumberCompositeSearchParamListTableValuedParameterDefinition("@TokenNumberNumberCompositeSearchParams");

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Int32> AffectedRows, System.Nullable<System.Boolean> RaiseExceptionOnConflict, System.Nullable<System.Boolean> IsResourceChangeCaptureEnabled, System.Nullable<System.Int64> TransactionId, System.Nullable<System.Boolean> SingleTransaction, global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources, global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts, global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParms, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResources";
                _AffectedRows.AddParameter(command.Parameters, AffectedRows);
                _RaiseExceptionOnConflict.AddParameter(command.Parameters, RaiseExceptionOnConflict);
                _IsResourceChangeCaptureEnabled.AddParameter(command.Parameters, IsResourceChangeCaptureEnabled);
                _TransactionId.AddParameter(command.Parameters, TransactionId);
                _SingleTransaction.AddParameter(command.Parameters, SingleTransaction);
                _Resources.AddParameter(command.Parameters, Resources);
                _ResourceWriteClaims.AddParameter(command.Parameters, ResourceWriteClaims);
                _ReferenceSearchParams.AddParameter(command.Parameters, ReferenceSearchParams);
                _TokenSearchParams.AddParameter(command.Parameters, TokenSearchParams);
                _TokenTexts.AddParameter(command.Parameters, TokenTexts);
                _StringSearchParams.AddParameter(command.Parameters, StringSearchParams);
                _UriSearchParams.AddParameter(command.Parameters, UriSearchParams);
                _NumberSearchParams.AddParameter(command.Parameters, NumberSearchParams);
                _QuantitySearchParams.AddParameter(command.Parameters, QuantitySearchParams);
                _DateTimeSearchParms.AddParameter(command.Parameters, DateTimeSearchParms);
                _ReferenceTokenCompositeSearchParams.AddParameter(command.Parameters, ReferenceTokenCompositeSearchParams);
                _TokenTokenCompositeSearchParams.AddParameter(command.Parameters, TokenTokenCompositeSearchParams);
                _TokenDateTimeCompositeSearchParams.AddParameter(command.Parameters, TokenDateTimeCompositeSearchParams);
                _TokenQuantityCompositeSearchParams.AddParameter(command.Parameters, TokenQuantityCompositeSearchParams);
                _TokenStringCompositeSearchParams.AddParameter(command.Parameters, TokenStringCompositeSearchParams);
                _TokenNumberNumberCompositeSearchParams.AddParameter(command.Parameters, TokenNumberNumberCompositeSearchParams);
            }

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Int32> AffectedRows, System.Nullable<System.Boolean> RaiseExceptionOnConflict, System.Nullable<System.Boolean> IsResourceChangeCaptureEnabled, System.Nullable<System.Int64> TransactionId, System.Nullable<System.Boolean> SingleTransaction, MergeResourcesTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, AffectedRows: AffectedRows, RaiseExceptionOnConflict: RaiseExceptionOnConflict, IsResourceChangeCaptureEnabled: IsResourceChangeCaptureEnabled, TransactionId: TransactionId, SingleTransaction: SingleTransaction, Resources: tableValuedParameters.Resources, ResourceWriteClaims: tableValuedParameters.ResourceWriteClaims, ReferenceSearchParams: tableValuedParameters.ReferenceSearchParams, TokenSearchParams: tableValuedParameters.TokenSearchParams, TokenTexts: tableValuedParameters.TokenTexts, StringSearchParams: tableValuedParameters.StringSearchParams, UriSearchParams: tableValuedParameters.UriSearchParams, NumberSearchParams: tableValuedParameters.NumberSearchParams, QuantitySearchParams: tableValuedParameters.QuantitySearchParams, DateTimeSearchParms: tableValuedParameters.DateTimeSearchParms, ReferenceTokenCompositeSearchParams: tableValuedParameters.ReferenceTokenCompositeSearchParams, TokenTokenCompositeSearchParams: tableValuedParameters.TokenTokenCompositeSearchParams, TokenDateTimeCompositeSearchParams: tableValuedParameters.TokenDateTimeCompositeSearchParams, TokenQuantityCompositeSearchParams: tableValuedParameters.TokenQuantityCompositeSearchParams, TokenStringCompositeSearchParams: tableValuedParameters.TokenStringCompositeSearchParams, TokenNumberNumberCompositeSearchParams: tableValuedParameters.TokenNumberNumberCompositeSearchParams);
            }

            public System.Nullable<System.Int32> GetOutputs(SqlCommandWrapper command)
            {
                return _AffectedRows.GetOutputValue(command);
            }
        }

        internal class MergeResourcesTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, MergeResourcesTableValuedParameters>
        {
            public MergeResourcesTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator, ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimListRow> ResourceWriteClaimListRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamListRow> ReferenceSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenSearchParamListRow> TokenSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTextListRow> TokenTextListRowGenerator, ITableValuedParameterRowGenerator<TInput, StringSearchParamListRow> StringSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, UriSearchParamListRow> UriSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, NumberSearchParamListRow> NumberSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, QuantitySearchParamListRow> QuantitySearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamListRow> DateTimeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParamListRowGenerator)
            {
                this.ResourceListRowGenerator = ResourceListRowGenerator;
                this.ResourceWriteClaimListRowGenerator = ResourceWriteClaimListRowGenerator;
                this.ReferenceSearchParamListRowGenerator = ReferenceSearchParamListRowGenerator;
                this.TokenSearchParamListRowGenerator = TokenSearchParamListRowGenerator;
                this.TokenTextListRowGenerator = TokenTextListRowGenerator;
                this.StringSearchParamListRowGenerator = StringSearchParamListRowGenerator;
                this.UriSearchParamListRowGenerator = UriSearchParamListRowGenerator;
                this.NumberSearchParamListRowGenerator = NumberSearchParamListRowGenerator;
                this.QuantitySearchParamListRowGenerator = QuantitySearchParamListRowGenerator;
                this.DateTimeSearchParamListRowGenerator = DateTimeSearchParamListRowGenerator;
                this.ReferenceTokenCompositeSearchParamListRowGenerator = ReferenceTokenCompositeSearchParamListRowGenerator;
                this.TokenTokenCompositeSearchParamListRowGenerator = TokenTokenCompositeSearchParamListRowGenerator;
                this.TokenDateTimeCompositeSearchParamListRowGenerator = TokenDateTimeCompositeSearchParamListRowGenerator;
                this.TokenQuantityCompositeSearchParamListRowGenerator = TokenQuantityCompositeSearchParamListRowGenerator;
                this.TokenStringCompositeSearchParamListRowGenerator = TokenStringCompositeSearchParamListRowGenerator;
                this.TokenNumberNumberCompositeSearchParamListRowGenerator = TokenNumberNumberCompositeSearchParamListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimListRow> ResourceWriteClaimListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamListRow> ReferenceSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenSearchParamListRow> TokenSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTextListRow> TokenTextListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, StringSearchParamListRow> StringSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, UriSearchParamListRow> UriSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, NumberSearchParamListRow> NumberSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, QuantitySearchParamListRow> QuantitySearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamListRow> DateTimeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParamListRowGenerator;

            public MergeResourcesTableValuedParameters Generate(TInput input)
            {
                return new MergeResourcesTableValuedParameters(ResourceListRowGenerator.GenerateRows(input), ResourceWriteClaimListRowGenerator.GenerateRows(input), ReferenceSearchParamListRowGenerator.GenerateRows(input), TokenSearchParamListRowGenerator.GenerateRows(input), TokenTextListRowGenerator.GenerateRows(input), StringSearchParamListRowGenerator.GenerateRows(input), UriSearchParamListRowGenerator.GenerateRows(input), NumberSearchParamListRowGenerator.GenerateRows(input), QuantitySearchParamListRowGenerator.GenerateRows(input), DateTimeSearchParamListRowGenerator.GenerateRows(input), ReferenceTokenCompositeSearchParamListRowGenerator.GenerateRows(input), TokenTokenCompositeSearchParamListRowGenerator.GenerateRows(input), TokenDateTimeCompositeSearchParamListRowGenerator.GenerateRows(input), TokenQuantityCompositeSearchParamListRowGenerator.GenerateRows(input), TokenStringCompositeSearchParamListRowGenerator.GenerateRows(input), TokenNumberNumberCompositeSearchParamListRowGenerator.GenerateRows(input));
            }
        }

        internal struct MergeResourcesTableValuedParameters
        {
            internal MergeResourcesTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources, global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts, global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParms, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams)
            {
                this.Resources = Resources;
                this.ResourceWriteClaims = ResourceWriteClaims;
                this.ReferenceSearchParams = ReferenceSearchParams;
                this.TokenSearchParams = TokenSearchParams;
                this.TokenTexts = TokenTexts;
                this.StringSearchParams = StringSearchParams;
                this.UriSearchParams = UriSearchParams;
                this.NumberSearchParams = NumberSearchParams;
                this.QuantitySearchParams = QuantitySearchParams;
                this.DateTimeSearchParms = DateTimeSearchParms;
                this.ReferenceTokenCompositeSearchParams = ReferenceTokenCompositeSearchParams;
                this.TokenTokenCompositeSearchParams = TokenTokenCompositeSearchParams;
                this.TokenDateTimeCompositeSearchParams = TokenDateTimeCompositeSearchParams;
                this.TokenQuantityCompositeSearchParams = TokenQuantityCompositeSearchParams;
                this.TokenStringCompositeSearchParams = TokenStringCompositeSearchParams;
                this.TokenNumberNumberCompositeSearchParams = TokenNumberNumberCompositeSearchParams;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources { get; }
            internal global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims { get; }
            internal global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts { get; }
            internal global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParms { get; }
            internal global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams { get; }
        }

        internal class MergeResourcesAdvanceTransactionVisibilityProcedure : StoredProcedure
        {
            internal MergeResourcesAdvanceTransactionVisibilityProcedure() : base("dbo.MergeResourcesAdvanceTransactionVisibility")
            {
            }

            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _AffectedRows = new OutputParameterDefinition<System.Nullable<System.Int32>>("@AffectedRows", global::System.Data.SqlDbType.Int, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Int32> AffectedRows)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesAdvanceTransactionVisibility";
                _AffectedRows.AddParameter(command.Parameters, AffectedRows);
            }

            public System.Nullable<System.Int32> GetOutputs(SqlCommandWrapper command)
            {
                return _AffectedRows.GetOutputValue(command);
            }
        }

        internal class MergeResourcesBeginTransactionProcedure : StoredProcedure
        {
            internal MergeResourcesBeginTransactionProcedure() : base("dbo.MergeResourcesBeginTransaction")
            {
            }

            private readonly ParameterDefinition<System.Int32> _Count = new ParameterDefinition<System.Int32>("@Count", global::System.Data.SqlDbType.Int, false);
            private readonly OutputParameterDefinition<System.Int64> _TransactionId = new OutputParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);
            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _SequenceRangeFirstValue = new OutputParameterDefinition<System.Nullable<System.Int32>>("@SequenceRangeFirstValue", global::System.Data.SqlDbType.Int, true);
            private readonly ParameterDefinition<System.Nullable<System.DateTime>> _HeartbeatDate = new ParameterDefinition<System.Nullable<System.DateTime>>("@HeartbeatDate", global::System.Data.SqlDbType.DateTime, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int32 Count, System.Int64 TransactionId, System.Nullable<System.Int32> SequenceRangeFirstValue, System.Nullable<System.DateTime> HeartbeatDate)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesBeginTransaction";
                _Count.AddParameter(command.Parameters, Count);
                _TransactionId.AddParameter(command.Parameters, TransactionId);
                _SequenceRangeFirstValue.AddParameter(command.Parameters, SequenceRangeFirstValue);
                _HeartbeatDate.AddParameter(command.Parameters, HeartbeatDate);
            }

            public System.ValueTuple<System.Int64, System.Nullable<System.Int32>> GetOutputs(SqlCommandWrapper command)
            {
                return global::System.ValueTuple.Create(_TransactionId.GetOutputValue(command), _SequenceRangeFirstValue.GetOutputValue(command));
            }
        }

        internal class MergeResourcesCommitTransactionProcedure : StoredProcedure
        {
            internal MergeResourcesCommitTransactionProcedure() : base("dbo.MergeResourcesCommitTransaction")
            {
            }

            private readonly ParameterDefinition<System.Int64> _TransactionId = new ParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.String> _FailureReason = new ParameterDefinition<System.String>("@FailureReason", global::System.Data.SqlDbType.VarChar, true, -1);
            private readonly ParameterDefinition<System.Nullable<System.Boolean>> _OverrideIsControlledByClientCheck = new ParameterDefinition<System.Nullable<System.Boolean>>("@OverrideIsControlledByClientCheck", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId, System.String FailureReason, System.Nullable<System.Boolean> OverrideIsControlledByClientCheck)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesCommitTransaction";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
                _FailureReason.AddParameter(command.Parameters, FailureReason);
                _OverrideIsControlledByClientCheck.AddParameter(command.Parameters, OverrideIsControlledByClientCheck);
            }
        }

        internal class MergeResourcesDeleteInvisibleHistoryProcedure : StoredProcedure
        {
            internal MergeResourcesDeleteInvisibleHistoryProcedure() : base("dbo.MergeResourcesDeleteInvisibleHistory")
            {
            }

            private readonly ParameterDefinition<System.Int64> _TransactionId = new ParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);
            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _AffectedRows = new OutputParameterDefinition<System.Nullable<System.Int32>>("@AffectedRows", global::System.Data.SqlDbType.Int, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId, System.Nullable<System.Int32> AffectedRows)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesDeleteInvisibleHistory";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
                _AffectedRows.AddParameter(command.Parameters, AffectedRows);
            }

            public System.Nullable<System.Int32> GetOutputs(SqlCommandWrapper command)
            {
                return _AffectedRows.GetOutputValue(command);
            }
        }

        internal class MergeResourcesGetTimeoutTransactionsProcedure : StoredProcedure
        {
            internal MergeResourcesGetTimeoutTransactionsProcedure() : base("dbo.MergeResourcesGetTimeoutTransactions")
            {
            }

            private readonly ParameterDefinition<System.Int32> _TimeoutSec = new ParameterDefinition<System.Int32>("@TimeoutSec", global::System.Data.SqlDbType.Int, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int32 TimeoutSec)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesGetTimeoutTransactions";
                _TimeoutSec.AddParameter(command.Parameters, TimeoutSec);
            }
        }

        internal class MergeResourcesGetTransactionVisibilityProcedure : StoredProcedure
        {
            internal MergeResourcesGetTransactionVisibilityProcedure() : base("dbo.MergeResourcesGetTransactionVisibility")
            {
            }

            private readonly OutputParameterDefinition<System.Int64> _TransactionId = new OutputParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesGetTransactionVisibility";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
            }

            public System.Int64 GetOutputs(SqlCommandWrapper command)
            {
                return _TransactionId.GetOutputValue(command);
            }
        }

        internal class MergeResourcesPutTransactionHeartbeatProcedure : StoredProcedure
        {
            internal MergeResourcesPutTransactionHeartbeatProcedure() : base("dbo.MergeResourcesPutTransactionHeartbeat")
            {
            }

            private readonly ParameterDefinition<System.Int64> _TransactionId = new ParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesPutTransactionHeartbeat";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
            }
        }

        internal class MergeResourcesPutTransactionInvisibleHistoryProcedure : StoredProcedure
        {
            internal MergeResourcesPutTransactionInvisibleHistoryProcedure() : base("dbo.MergeResourcesPutTransactionInvisibleHistory")
            {
            }

            private readonly ParameterDefinition<System.Int64> _TransactionId = new ParameterDefinition<System.Int64>("@TransactionId", global::System.Data.SqlDbType.BigInt, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Int64 TransactionId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.MergeResourcesPutTransactionInvisibleHistory";
                _TransactionId.AddParameter(command.Parameters, TransactionId);
            }
        }

        internal class PutJobCancelationProcedure : StoredProcedure
        {
            internal PutJobCancelationProcedure() : base("dbo.PutJobCancelation")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _GroupId = new ParameterDefinition<System.Nullable<System.Int64>>("@GroupId", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _JobId = new ParameterDefinition<System.Nullable<System.Int64>>("@JobId", global::System.Data.SqlDbType.BigInt, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Nullable<System.Int64> GroupId, System.Nullable<System.Int64> JobId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.PutJobCancelation";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _GroupId.AddParameter(command.Parameters, GroupId);
                _JobId.AddParameter(command.Parameters, JobId);
            }
        }

        internal class PutJobHeartbeatProcedure : StoredProcedure
        {
            internal PutJobHeartbeatProcedure() : base("dbo.PutJobHeartbeat")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Int64> _JobId = new ParameterDefinition<System.Int64>("@JobId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int64> _Version = new ParameterDefinition<System.Int64>("@Version", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Nullable<System.Int64>> _Data = new ParameterDefinition<System.Nullable<System.Int64>>("@Data", global::System.Data.SqlDbType.BigInt, true);
            private readonly ParameterDefinition<System.String> _CurrentResult = new ParameterDefinition<System.String>("@CurrentResult", global::System.Data.SqlDbType.VarChar, true, -1);
            private readonly OutputParameterDefinition<System.Nullable<System.Boolean>> _CancelRequested = new OutputParameterDefinition<System.Nullable<System.Boolean>>("@CancelRequested", global::System.Data.SqlDbType.Bit, true);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Int64 JobId, System.Int64 Version, System.Nullable<System.Int64> Data, System.String CurrentResult, System.Nullable<System.Boolean> CancelRequested)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.PutJobHeartbeat";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _JobId.AddParameter(command.Parameters, JobId);
                _Version.AddParameter(command.Parameters, Version);
                _Data.AddParameter(command.Parameters, Data);
                _CurrentResult.AddParameter(command.Parameters, CurrentResult);
                _CancelRequested.AddParameter(command.Parameters, CancelRequested);
            }

            public System.Nullable<System.Boolean> GetOutputs(SqlCommandWrapper command)
            {
                return _CancelRequested.GetOutputValue(command);
            }
        }

        internal class PutJobStatusProcedure : StoredProcedure
        {
            internal PutJobStatusProcedure() : base("dbo.PutJobStatus")
            {
            }

            private readonly ParameterDefinition<System.Byte> _QueueType = new ParameterDefinition<System.Byte>("@QueueType", global::System.Data.SqlDbType.TinyInt, false);
            private readonly ParameterDefinition<System.Int64> _JobId = new ParameterDefinition<System.Int64>("@JobId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int64> _Version = new ParameterDefinition<System.Int64>("@Version", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Boolean> _Failed = new ParameterDefinition<System.Boolean>("@Failed", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Int64> _Data = new ParameterDefinition<System.Int64>("@Data", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.String> _FinalResult = new ParameterDefinition<System.String>("@FinalResult", global::System.Data.SqlDbType.VarChar, false, -1);
            private readonly ParameterDefinition<System.Boolean> _RequestCancellationOnFailure = new ParameterDefinition<System.Boolean>("@RequestCancellationOnFailure", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Byte QueueType, System.Int64 JobId, System.Int64 Version, System.Boolean Failed, System.Int64 Data, System.String FinalResult, System.Boolean RequestCancellationOnFailure)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.PutJobStatus";
                _QueueType.AddParameter(command.Parameters, QueueType);
                _JobId.AddParameter(command.Parameters, JobId);
                _Version.AddParameter(command.Parameters, Version);
                _Failed.AddParameter(command.Parameters, Failed);
                _Data.AddParameter(command.Parameters, Data);
                _FinalResult.AddParameter(command.Parameters, FinalResult);
                _RequestCancellationOnFailure.AddParameter(command.Parameters, RequestCancellationOnFailure);
            }
        }

        internal class RemovePartitionFromResourceChangesProcedure : StoredProcedure
        {
            internal RemovePartitionFromResourceChangesProcedure() : base("dbo.RemovePartitionFromResourceChanges_2")
            {
            }

            private readonly ParameterDefinition<System.Int32> _partitionNumberToSwitchOut = new ParameterDefinition<System.Int32>("@partitionNumberToSwitchOut", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.DateTime> _partitionBoundaryToMerge = new ParameterDefinition<System.DateTime>("@partitionBoundaryToMerge", global::System.Data.SqlDbType.DateTime2, false, 7);

            public void PopulateCommand(SqlCommandWrapper command, System.Int32 partitionNumberToSwitchOut, System.DateTime partitionBoundaryToMerge)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.RemovePartitionFromResourceChanges_2";
                _partitionNumberToSwitchOut.AddParameter(command.Parameters, partitionNumberToSwitchOut);
                _partitionBoundaryToMerge.AddParameter(command.Parameters, partitionBoundaryToMerge);
            }
        }

        internal class SwitchPartitionsInProcedure : StoredProcedure
        {
            internal SwitchPartitionsInProcedure() : base("dbo.SwitchPartitionsIn")
            {
            }

            private readonly ParameterDefinition<System.String> _Tbl = new ParameterDefinition<System.String>("@Tbl", global::System.Data.SqlDbType.VarChar, false, 100);

            public void PopulateCommand(SqlCommandWrapper command, System.String Tbl)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.SwitchPartitionsIn";
                _Tbl.AddParameter(command.Parameters, Tbl);
            }
        }

        internal class SwitchPartitionsInAllTablesProcedure : StoredProcedure
        {
            internal SwitchPartitionsInAllTablesProcedure() : base("dbo.SwitchPartitionsInAllTables")
            {
            }

            public void PopulateCommand(SqlCommandWrapper command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.SwitchPartitionsInAllTables";
            }
        }

        internal class SwitchPartitionsOutProcedure : StoredProcedure
        {
            internal SwitchPartitionsOutProcedure() : base("dbo.SwitchPartitionsOut")
            {
            }

            private readonly ParameterDefinition<System.String> _Tbl = new ParameterDefinition<System.String>("@Tbl", global::System.Data.SqlDbType.VarChar, false, 100);
            private readonly ParameterDefinition<System.Boolean> _RebuildClustered = new ParameterDefinition<System.Boolean>("@RebuildClustered", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.String Tbl, System.Boolean RebuildClustered)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.SwitchPartitionsOut";
                _Tbl.AddParameter(command.Parameters, Tbl);
                _RebuildClustered.AddParameter(command.Parameters, RebuildClustered);
            }
        }

        internal class SwitchPartitionsOutAllTablesProcedure : StoredProcedure
        {
            internal SwitchPartitionsOutAllTablesProcedure() : base("dbo.SwitchPartitionsOutAllTables")
            {
            }

            private readonly ParameterDefinition<System.Boolean> _RebuildClustered = new ParameterDefinition<System.Boolean>("@RebuildClustered", global::System.Data.SqlDbType.Bit, false);

            public void PopulateCommand(SqlCommandWrapper command, System.Boolean RebuildClustered)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.SwitchPartitionsOutAllTables";
                _RebuildClustered.AddParameter(command.Parameters, RebuildClustered);
            }
        }

        internal class UpdateEventAgentCheckpointProcedure : StoredProcedure
        {
            internal UpdateEventAgentCheckpointProcedure() : base("dbo.UpdateEventAgentCheckpoint")
            {
            }

            private readonly ParameterDefinition<System.String> _CheckpointId = new ParameterDefinition<System.String>("@CheckpointId", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.Nullable<System.DateTimeOffset>> _LastProcessedDateTime = new ParameterDefinition<System.Nullable<System.DateTimeOffset>>("@LastProcessedDateTime", global::System.Data.SqlDbType.DateTimeOffset, true, 7);
            private readonly ParameterDefinition<System.String> _LastProcessedIdentifier = new ParameterDefinition<System.String>("@LastProcessedIdentifier", global::System.Data.SqlDbType.VarChar, true, 64);

            public void PopulateCommand(SqlCommandWrapper command, System.String CheckpointId, System.Nullable<System.DateTimeOffset> LastProcessedDateTime, System.String LastProcessedIdentifier)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpdateEventAgentCheckpoint";
                _CheckpointId.AddParameter(command.Parameters, CheckpointId);
                _LastProcessedDateTime.AddParameter(command.Parameters, LastProcessedDateTime);
                _LastProcessedIdentifier.AddParameter(command.Parameters, LastProcessedIdentifier);
            }
        }

        internal class UpdateReindexJobProcedure : StoredProcedure
        {
            internal UpdateReindexJobProcedure() : base("dbo.UpdateReindexJob")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<System.String> _rawJobRecord = new ParameterDefinition<System.String>("@rawJobRecord", global::System.Data.SqlDbType.VarChar, false, -1);
            private readonly ParameterDefinition<System.Byte[]> _jobVersion = new ParameterDefinition<System.Byte[]>("@jobVersion", global::System.Data.SqlDbType.Binary, false, 8);

            public void PopulateCommand(SqlCommandWrapper command, System.String id, System.String status, System.String rawJobRecord, System.Byte[] jobVersion)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpdateReindexJob";
                _id.AddParameter(command.Parameters, id);
                _status.AddParameter(command.Parameters, status);
                _rawJobRecord.AddParameter(command.Parameters, rawJobRecord);
                _jobVersion.AddParameter(command.Parameters, jobVersion);
            }
        }

        internal class UpdateResourceSearchParamsProcedure : StoredProcedure
        {
            internal UpdateResourceSearchParamsProcedure() : base("dbo.UpdateResourceSearchParams")
            {
            }

            private readonly OutputParameterDefinition<System.Nullable<System.Int32>> _FailedResources = new OutputParameterDefinition<System.Nullable<System.Int32>>("@FailedResources", global::System.Data.SqlDbType.Int, true);
            private readonly ResourceListTableValuedParameterDefinition _Resources = new ResourceListTableValuedParameterDefinition("@Resources");
            private readonly ResourceWriteClaimListTableValuedParameterDefinition _ResourceWriteClaims = new ResourceWriteClaimListTableValuedParameterDefinition("@ResourceWriteClaims");
            private readonly ReferenceSearchParamListTableValuedParameterDefinition _ReferenceSearchParams = new ReferenceSearchParamListTableValuedParameterDefinition("@ReferenceSearchParams");
            private readonly TokenSearchParamListTableValuedParameterDefinition _TokenSearchParams = new TokenSearchParamListTableValuedParameterDefinition("@TokenSearchParams");
            private readonly TokenTextListTableValuedParameterDefinition _TokenTexts = new TokenTextListTableValuedParameterDefinition("@TokenTexts");
            private readonly StringSearchParamListTableValuedParameterDefinition _StringSearchParams = new StringSearchParamListTableValuedParameterDefinition("@StringSearchParams");
            private readonly UriSearchParamListTableValuedParameterDefinition _UriSearchParams = new UriSearchParamListTableValuedParameterDefinition("@UriSearchParams");
            private readonly NumberSearchParamListTableValuedParameterDefinition _NumberSearchParams = new NumberSearchParamListTableValuedParameterDefinition("@NumberSearchParams");
            private readonly QuantitySearchParamListTableValuedParameterDefinition _QuantitySearchParams = new QuantitySearchParamListTableValuedParameterDefinition("@QuantitySearchParams");
            private readonly DateTimeSearchParamListTableValuedParameterDefinition _DateTimeSearchParams = new DateTimeSearchParamListTableValuedParameterDefinition("@DateTimeSearchParams");
            private readonly ReferenceTokenCompositeSearchParamListTableValuedParameterDefinition _ReferenceTokenCompositeSearchParams = new ReferenceTokenCompositeSearchParamListTableValuedParameterDefinition("@ReferenceTokenCompositeSearchParams");
            private readonly TokenTokenCompositeSearchParamListTableValuedParameterDefinition _TokenTokenCompositeSearchParams = new TokenTokenCompositeSearchParamListTableValuedParameterDefinition("@TokenTokenCompositeSearchParams");
            private readonly TokenDateTimeCompositeSearchParamListTableValuedParameterDefinition _TokenDateTimeCompositeSearchParams = new TokenDateTimeCompositeSearchParamListTableValuedParameterDefinition("@TokenDateTimeCompositeSearchParams");
            private readonly TokenQuantityCompositeSearchParamListTableValuedParameterDefinition _TokenQuantityCompositeSearchParams = new TokenQuantityCompositeSearchParamListTableValuedParameterDefinition("@TokenQuantityCompositeSearchParams");
            private readonly TokenStringCompositeSearchParamListTableValuedParameterDefinition _TokenStringCompositeSearchParams = new TokenStringCompositeSearchParamListTableValuedParameterDefinition("@TokenStringCompositeSearchParams");
            private readonly TokenNumberNumberCompositeSearchParamListTableValuedParameterDefinition _TokenNumberNumberCompositeSearchParams = new TokenNumberNumberCompositeSearchParamListTableValuedParameterDefinition("@TokenNumberNumberCompositeSearchParams");

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Int32> FailedResources, global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources, global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts, global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParams, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpdateResourceSearchParams";
                _FailedResources.AddParameter(command.Parameters, FailedResources);
                _Resources.AddParameter(command.Parameters, Resources);
                _ResourceWriteClaims.AddParameter(command.Parameters, ResourceWriteClaims);
                _ReferenceSearchParams.AddParameter(command.Parameters, ReferenceSearchParams);
                _TokenSearchParams.AddParameter(command.Parameters, TokenSearchParams);
                _TokenTexts.AddParameter(command.Parameters, TokenTexts);
                _StringSearchParams.AddParameter(command.Parameters, StringSearchParams);
                _UriSearchParams.AddParameter(command.Parameters, UriSearchParams);
                _NumberSearchParams.AddParameter(command.Parameters, NumberSearchParams);
                _QuantitySearchParams.AddParameter(command.Parameters, QuantitySearchParams);
                _DateTimeSearchParams.AddParameter(command.Parameters, DateTimeSearchParams);
                _ReferenceTokenCompositeSearchParams.AddParameter(command.Parameters, ReferenceTokenCompositeSearchParams);
                _TokenTokenCompositeSearchParams.AddParameter(command.Parameters, TokenTokenCompositeSearchParams);
                _TokenDateTimeCompositeSearchParams.AddParameter(command.Parameters, TokenDateTimeCompositeSearchParams);
                _TokenQuantityCompositeSearchParams.AddParameter(command.Parameters, TokenQuantityCompositeSearchParams);
                _TokenStringCompositeSearchParams.AddParameter(command.Parameters, TokenStringCompositeSearchParams);
                _TokenNumberNumberCompositeSearchParams.AddParameter(command.Parameters, TokenNumberNumberCompositeSearchParams);
            }

            public void PopulateCommand(SqlCommandWrapper command, System.Nullable<System.Int32> FailedResources, UpdateResourceSearchParamsTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, FailedResources: FailedResources, Resources: tableValuedParameters.Resources, ResourceWriteClaims: tableValuedParameters.ResourceWriteClaims, ReferenceSearchParams: tableValuedParameters.ReferenceSearchParams, TokenSearchParams: tableValuedParameters.TokenSearchParams, TokenTexts: tableValuedParameters.TokenTexts, StringSearchParams: tableValuedParameters.StringSearchParams, UriSearchParams: tableValuedParameters.UriSearchParams, NumberSearchParams: tableValuedParameters.NumberSearchParams, QuantitySearchParams: tableValuedParameters.QuantitySearchParams, DateTimeSearchParams: tableValuedParameters.DateTimeSearchParams, ReferenceTokenCompositeSearchParams: tableValuedParameters.ReferenceTokenCompositeSearchParams, TokenTokenCompositeSearchParams: tableValuedParameters.TokenTokenCompositeSearchParams, TokenDateTimeCompositeSearchParams: tableValuedParameters.TokenDateTimeCompositeSearchParams, TokenQuantityCompositeSearchParams: tableValuedParameters.TokenQuantityCompositeSearchParams, TokenStringCompositeSearchParams: tableValuedParameters.TokenStringCompositeSearchParams, TokenNumberNumberCompositeSearchParams: tableValuedParameters.TokenNumberNumberCompositeSearchParams);
            }

            public System.Nullable<System.Int32> GetOutputs(SqlCommandWrapper command)
            {
                return _FailedResources.GetOutputValue(command);
            }
        }

        internal class UpdateResourceSearchParamsTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, UpdateResourceSearchParamsTableValuedParameters>
        {
            public UpdateResourceSearchParamsTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator, ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimListRow> ResourceWriteClaimListRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamListRow> ReferenceSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenSearchParamListRow> TokenSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTextListRow> TokenTextListRowGenerator, ITableValuedParameterRowGenerator<TInput, StringSearchParamListRow> StringSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, UriSearchParamListRow> UriSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, NumberSearchParamListRow> NumberSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, QuantitySearchParamListRow> QuantitySearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamListRow> DateTimeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParamListRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParamListRowGenerator)
            {
                this.ResourceListRowGenerator = ResourceListRowGenerator;
                this.ResourceWriteClaimListRowGenerator = ResourceWriteClaimListRowGenerator;
                this.ReferenceSearchParamListRowGenerator = ReferenceSearchParamListRowGenerator;
                this.TokenSearchParamListRowGenerator = TokenSearchParamListRowGenerator;
                this.TokenTextListRowGenerator = TokenTextListRowGenerator;
                this.StringSearchParamListRowGenerator = StringSearchParamListRowGenerator;
                this.UriSearchParamListRowGenerator = UriSearchParamListRowGenerator;
                this.NumberSearchParamListRowGenerator = NumberSearchParamListRowGenerator;
                this.QuantitySearchParamListRowGenerator = QuantitySearchParamListRowGenerator;
                this.DateTimeSearchParamListRowGenerator = DateTimeSearchParamListRowGenerator;
                this.ReferenceTokenCompositeSearchParamListRowGenerator = ReferenceTokenCompositeSearchParamListRowGenerator;
                this.TokenTokenCompositeSearchParamListRowGenerator = TokenTokenCompositeSearchParamListRowGenerator;
                this.TokenDateTimeCompositeSearchParamListRowGenerator = TokenDateTimeCompositeSearchParamListRowGenerator;
                this.TokenQuantityCompositeSearchParamListRowGenerator = TokenQuantityCompositeSearchParamListRowGenerator;
                this.TokenStringCompositeSearchParamListRowGenerator = TokenStringCompositeSearchParamListRowGenerator;
                this.TokenNumberNumberCompositeSearchParamListRowGenerator = TokenNumberNumberCompositeSearchParamListRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceListRow> ResourceListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimListRow> ResourceWriteClaimListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamListRow> ReferenceSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenSearchParamListRow> TokenSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTextListRow> TokenTextListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, StringSearchParamListRow> StringSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, UriSearchParamListRow> UriSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, NumberSearchParamListRow> NumberSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, QuantitySearchParamListRow> QuantitySearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamListRow> DateTimeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParamListRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParamListRowGenerator;

            public UpdateResourceSearchParamsTableValuedParameters Generate(TInput input)
            {
                return new UpdateResourceSearchParamsTableValuedParameters(ResourceListRowGenerator.GenerateRows(input), ResourceWriteClaimListRowGenerator.GenerateRows(input), ReferenceSearchParamListRowGenerator.GenerateRows(input), TokenSearchParamListRowGenerator.GenerateRows(input), TokenTextListRowGenerator.GenerateRows(input), StringSearchParamListRowGenerator.GenerateRows(input), UriSearchParamListRowGenerator.GenerateRows(input), NumberSearchParamListRowGenerator.GenerateRows(input), QuantitySearchParamListRowGenerator.GenerateRows(input), DateTimeSearchParamListRowGenerator.GenerateRows(input), ReferenceTokenCompositeSearchParamListRowGenerator.GenerateRows(input), TokenTokenCompositeSearchParamListRowGenerator.GenerateRows(input), TokenDateTimeCompositeSearchParamListRowGenerator.GenerateRows(input), TokenQuantityCompositeSearchParamListRowGenerator.GenerateRows(input), TokenStringCompositeSearchParamListRowGenerator.GenerateRows(input), TokenNumberNumberCompositeSearchParamListRowGenerator.GenerateRows(input));
            }
        }

        internal struct UpdateResourceSearchParamsTableValuedParameters
        {
            internal UpdateResourceSearchParamsTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources, global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts, global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParams, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams)
            {
                this.Resources = Resources;
                this.ResourceWriteClaims = ResourceWriteClaims;
                this.ReferenceSearchParams = ReferenceSearchParams;
                this.TokenSearchParams = TokenSearchParams;
                this.TokenTexts = TokenTexts;
                this.StringSearchParams = StringSearchParams;
                this.UriSearchParams = UriSearchParams;
                this.NumberSearchParams = NumberSearchParams;
                this.QuantitySearchParams = QuantitySearchParams;
                this.DateTimeSearchParams = DateTimeSearchParams;
                this.ReferenceTokenCompositeSearchParams = ReferenceTokenCompositeSearchParams;
                this.TokenTokenCompositeSearchParams = TokenTokenCompositeSearchParams;
                this.TokenDateTimeCompositeSearchParams = TokenDateTimeCompositeSearchParams;
                this.TokenQuantityCompositeSearchParams = TokenQuantityCompositeSearchParams;
                this.TokenStringCompositeSearchParams = TokenStringCompositeSearchParams;
                this.TokenNumberNumberCompositeSearchParams = TokenNumberNumberCompositeSearchParams;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceListRow> Resources { get; }
            internal global::System.Collections.Generic.IEnumerable<ResourceWriteClaimListRow> ResourceWriteClaims { get; }
            internal global::System.Collections.Generic.IEnumerable<ReferenceSearchParamListRow> ReferenceSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenSearchParamListRow> TokenSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenTextListRow> TokenTexts { get; }
            internal global::System.Collections.Generic.IEnumerable<StringSearchParamListRow> StringSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<UriSearchParamListRow> UriSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<NumberSearchParamListRow> NumberSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<QuantitySearchParamListRow> QuantitySearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<DateTimeSearchParamListRow> DateTimeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamListRow> ReferenceTokenCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamListRow> TokenTokenCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamListRow> TokenDateTimeCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamListRow> TokenQuantityCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamListRow> TokenStringCompositeSearchParams { get; }
            internal global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamListRow> TokenNumberNumberCompositeSearchParams { get; }
        }

        internal class UpsertSearchParamsProcedure : StoredProcedure
        {
            internal UpsertSearchParamsProcedure() : base("dbo.UpsertSearchParams")
            {
            }

            private readonly SearchParamTableTypeV2TableValuedParameterDefinition _searchParams = new SearchParamTableTypeV2TableValuedParameterDefinition("@searchParams");

            public void PopulateCommand(SqlCommandWrapper command, global::System.Collections.Generic.IEnumerable<SearchParamTableTypeV2Row> searchParams)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpsertSearchParams";
                _searchParams.AddParameter(command.Parameters, searchParams);
            }

            public void PopulateCommand(SqlCommandWrapper command, UpsertSearchParamsTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, searchParams: tableValuedParameters.SearchParams);
            }
        }

        internal class UpsertSearchParamsTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, UpsertSearchParamsTableValuedParameters>
        {
            public UpsertSearchParamsTvpGenerator(ITableValuedParameterRowGenerator<TInput, SearchParamTableTypeV2Row> SearchParamTableTypeV2RowGenerator)
            {
                this.SearchParamTableTypeV2RowGenerator = SearchParamTableTypeV2RowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, SearchParamTableTypeV2Row> SearchParamTableTypeV2RowGenerator;

            public UpsertSearchParamsTableValuedParameters Generate(TInput input)
            {
                return new UpsertSearchParamsTableValuedParameters(SearchParamTableTypeV2RowGenerator.GenerateRows(input));
            }
        }

        internal struct UpsertSearchParamsTableValuedParameters
        {
            internal UpsertSearchParamsTableValuedParameters(global::System.Collections.Generic.IEnumerable<SearchParamTableTypeV2Row> SearchParams)
            {
                this.SearchParams = SearchParams;
            }

            internal global::System.Collections.Generic.IEnumerable<SearchParamTableTypeV2Row> SearchParams { get; }
        }
    }
}